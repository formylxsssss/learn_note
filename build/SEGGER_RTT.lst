ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"SEGGER_RTT.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_GetAvailWriteSpace:
  24              	.LVL0:
  25              	.LFB4:
  26              		.file 1 "ARM_SEGGER_RTT/SEGGER_RTT.c"
   1:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
   2:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                SEGGER Microcontroller GmbH & Co. KG                *
   3:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
   5:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
   6:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       (c) 2014 - 2017  SEGGER Microcontroller GmbH & Co. KG        *
   7:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
   8:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  10:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
  11:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  12:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  14:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
  15:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  16:ARM_SEGGER_RTT/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  18:ARM_SEGGER_RTT/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:ARM_SEGGER_RTT/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:ARM_SEGGER_RTT/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  22:ARM_SEGGER_RTT/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:ARM_SEGGER_RTT/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:ARM_SEGGER_RTT/SEGGER_RTT.c **** * conditions are met:                                                *
  25:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  26:ARM_SEGGER_RTT/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:ARM_SEGGER_RTT/SEGGER_RTT.c **** *   notice, this list of conditions and the following disclaimer.    *
  28:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  29:ARM_SEGGER_RTT/SEGGER_RTT.c **** * o Redistributions in binary form must reproduce the above          *
  30:ARM_SEGGER_RTT/SEGGER_RTT.c **** *   copyright notice, this list of conditions and the following      *
  31:ARM_SEGGER_RTT/SEGGER_RTT.c **** *   disclaimer in the documentation and/or other materials provided  *
  32:ARM_SEGGER_RTT/SEGGER_RTT.c **** *   with the distribution.                                           *
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 2


  33:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  34:ARM_SEGGER_RTT/SEGGER_RTT.c **** * o Neither the name of SEGGER Microcontroller GmbH & Co. KG         *
  35:ARM_SEGGER_RTT/SEGGER_RTT.c **** *   nor the names of its contributors may be used to endorse or      *
  36:ARM_SEGGER_RTT/SEGGER_RTT.c **** *   promote products derived from this software without specific     *
  37:ARM_SEGGER_RTT/SEGGER_RTT.c **** *   prior written permission.                                        *
  38:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  39:ARM_SEGGER_RTT/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  40:ARM_SEGGER_RTT/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  41:ARM_SEGGER_RTT/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  42:ARM_SEGGER_RTT/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  43:ARM_SEGGER_RTT/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  44:ARM_SEGGER_RTT/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  45:ARM_SEGGER_RTT/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  46:ARM_SEGGER_RTT/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  47:ARM_SEGGER_RTT/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  48:ARM_SEGGER_RTT/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  49:ARM_SEGGER_RTT/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  50:ARM_SEGGER_RTT/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  51:ARM_SEGGER_RTT/SEGGER_RTT.c **** * DAMAGE.                                                            *
  52:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  53:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
  54:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  55:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       RTT version: 6.14                                           *
  56:ARM_SEGGER_RTT/SEGGER_RTT.c **** *                                                                    *
  57:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
  58:ARM_SEGGER_RTT/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  59:ARM_SEGGER_RTT/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  60:ARM_SEGGER_RTT/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  61:ARM_SEGGER_RTT/SEGGER_RTT.c ****           allows real-time communication on targets which support
  62:ARM_SEGGER_RTT/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  63:ARM_SEGGER_RTT/SEGGER_RTT.c **** Revision: $Rev: 4351 $
  64:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  65:ARM_SEGGER_RTT/SEGGER_RTT.c **** Additional information:
  66:ARM_SEGGER_RTT/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  67:ARM_SEGGER_RTT/SEGGER_RTT.c ****           H->T    Host to target communication
  68:ARM_SEGGER_RTT/SEGGER_RTT.c ****           T->H    Target to host communication
  69:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  70:ARM_SEGGER_RTT/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  71:ARM_SEGGER_RTT/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  72:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  73:ARM_SEGGER_RTT/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  74:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  75:ARM_SEGGER_RTT/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  76:ARM_SEGGER_RTT/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  77:ARM_SEGGER_RTT/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  78:ARM_SEGGER_RTT/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  79:ARM_SEGGER_RTT/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  80:ARM_SEGGER_RTT/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  81:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  82:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  83:ARM_SEGGER_RTT/SEGGER_RTT.c **** ----------------------------------------------------------------------
  84:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
  85:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  86:ARM_SEGGER_RTT/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  87:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  88:ARM_SEGGER_RTT/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  89:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 3


  90:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
  91:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
  92:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       Configuration, default values
  93:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
  94:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
  95:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
  96:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
  97:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  98:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  99:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 100:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 101:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 102:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 103:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 104:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 105:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 106:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 107:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 108:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 109:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 110:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 111:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 112:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 113:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 114:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 115:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 116:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #endif
 117:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 118:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 119:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 120:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            0
 121:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 122:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 123:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 124:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     0
 125:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 126:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 127:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 128:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 129:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 130:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 131:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 132:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 133:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 134:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 135:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 136:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 137:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 138:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 139:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   STRLEN
 140:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 141:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 142:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 143:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   MEMCPY
 144:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define MEMCPY(pDest, pSrc, NumBytes)                   memcpy((pDest), (pSrc), (NumBytes))
 145:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 146:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 4


 147:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   MIN
 148:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 149:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 150:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 151:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef   MAX
 152:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 153:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 154:ARM_SEGGER_RTT/SEGGER_RTT.c **** //
 155:ARM_SEGGER_RTT/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 156:ARM_SEGGER_RTT/SEGGER_RTT.c **** //
 157:ARM_SEGGER_RTT/SEGGER_RTT.c **** #ifndef NULL
 158:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define NULL 0
 159:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 160:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 161:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 162:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 163:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       Defines, fixed
 164:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 165:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
 166:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 167:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 168:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 169:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 170:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 171:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 172:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 173:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 174:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 175:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 176:ARM_SEGGER_RTT/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 177:ARM_SEGGER_RTT/SEGGER_RTT.c ****                                   Var
 178:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM__)
 179:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 180:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #else
 181:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 182:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #endif
 183:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 184:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 185:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 186:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 187:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 188:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 189:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 190:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 191:ARM_SEGGER_RTT/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 192:ARM_SEGGER_RTT/SEGGER_RTT.c ****                                         Var
 193:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM__)
 194:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 195:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #else
 196:ARM_SEGGER_RTT/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 197:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #endif
 198:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 199:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 200:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 201:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 202:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 203:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 5


 204:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 205:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 206:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 207:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 208:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 209:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 210:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 211:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 212:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 213:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 214:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 215:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 216:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 217:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 218:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 219:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 220:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 221:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 222:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 223:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 224:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 225:ARM_SEGGER_RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 226:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 227:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 228:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 229:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 230:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       Static const data
 231:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 232:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
 233:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 234:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 235:ARM_SEGGER_RTT/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 236:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 237:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 238:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 239:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       Static data
 240:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 241:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
 242:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 243:ARM_SEGGER_RTT/SEGGER_RTT.c **** //
 244:ARM_SEGGER_RTT/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 245:ARM_SEGGER_RTT/SEGGER_RTT.c **** //
 246:ARM_SEGGER_RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 247:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 248:ARM_SEGGER_RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]));
 249:ARM_SEGGER_RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]))
 250:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 251:ARM_SEGGER_RTT/SEGGER_RTT.c **** static char _ActiveTerminal;
 252:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 253:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 254:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 255:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       Static functions
 256:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 257:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
 258:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 259:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 260:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 6


 261:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 262:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       _DoInit()
 263:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 264:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 265:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 266:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 267:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 268:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 269:ARM_SEGGER_RTT/SEGGER_RTT.c **** #define INIT()  do {                                            \
 270:ARM_SEGGER_RTT/SEGGER_RTT.c ****                   if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
 271:ARM_SEGGER_RTT/SEGGER_RTT.c ****                 } while (0)
 272:ARM_SEGGER_RTT/SEGGER_RTT.c **** static void _DoInit(void) {
 273:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 274:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 275:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Initialize control block
 276:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 277:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p = &_SEGGER_RTT;
 278:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 279:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 280:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 281:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Initialize up buffer 0
 282:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 283:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 284:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 285:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 286:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 287:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 288:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 289:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 290:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Initialize down buffer 0
 291:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 292:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 293:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 294:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 295:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 296:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 297:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 298:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 299:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Finish initialization of the control block.
 300:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 301:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 302:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 303:ARM_SEGGER_RTT/SEGGER_RTT.c ****   strcpy(&p->acID[7], "RTT");
 304:ARM_SEGGER_RTT/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 305:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 306:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 307:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 308:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 309:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 310:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       _WriteBlocking()
 311:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 312:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 313:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 314:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 315:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    read by the host.
 316:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 317:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 7


 318:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 319:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 320:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 321:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 322:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 323:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 324:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 325:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 326:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 327:ARM_SEGGER_RTT/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 328:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 329:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 330:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned RdOff;
 331:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned WrOff;
 332:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 333:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 334:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 335:ARM_SEGGER_RTT/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 336:ARM_SEGGER_RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 337:ARM_SEGGER_RTT/SEGGER_RTT.c ****   do {
 338:ARM_SEGGER_RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 339:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 340:ARM_SEGGER_RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 341:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {
 342:ARM_SEGGER_RTT/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 343:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 344:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 345:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 346:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 347:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 348:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 349:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 350:ARM_SEGGER_RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 351:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 352:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff = 0u;
 353:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 354:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 355:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } while (NumBytes);
 356:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 357:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 358:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 359:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 360:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 361:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 362:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       _WriteNoCheck()
 363:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 364:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 365:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 366:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 367:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    read by the host.
 368:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 369:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 370:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 371:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 372:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 373:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 374:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 8


 375:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 376:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 377:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 378:ARM_SEGGER_RTT/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 379:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 380:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned WrOff;
 381:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned Rem;
 382:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 383:ARM_SEGGER_RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 384:ARM_SEGGER_RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 385:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 386:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 387:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // All data fits before wrap around
 388:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 389:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 390:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 391:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 392:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 393:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 394:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 395:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 396:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 397:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 398:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 399:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 400:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 401:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 402:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 403:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 404:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 405:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 406:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 407:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 408:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 409:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 410:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 411:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 412:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 413:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 414:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 415:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 416:ARM_SEGGER_RTT/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 417:ARM_SEGGER_RTT/SEGGER_RTT.c ****   char ac[2];
 418:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 419:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 420:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 421:ARM_SEGGER_RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, ac, 2u);
 422:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 423:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 424:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 425:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 426:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 427:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 428:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 429:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 430:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    buffer without blocking.
 431:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 9


 432:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 433:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 434:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 435:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 436:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 437:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 438:ARM_SEGGER_RTT/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  27              		.loc 1 438 66 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 439:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned RdOff;
  32              		.loc 1 439 3 view .LVU1
 440:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned WrOff;
  33              		.loc 1 440 3 view .LVU2
 441:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned r;
  34              		.loc 1 441 3 view .LVU3
 442:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 443:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 444:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 445:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 446:ARM_SEGGER_RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  35              		.loc 1 446 3 view .LVU4
  36              		.loc 1 446 9 is_stmt 0 view .LVU5
  37 0000 0369     		ldr	r3, [r0, #16]
  38              	.LVL1:
 447:ARM_SEGGER_RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  39              		.loc 1 447 3 is_stmt 1 view .LVU6
  40              		.loc 1 447 9 is_stmt 0 view .LVU7
  41 0002 C268     		ldr	r2, [r0, #12]
  42              	.LVL2:
 448:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  43              		.loc 1 448 3 is_stmt 1 view .LVU8
  44              		.loc 1 448 6 is_stmt 0 view .LVU9
  45 0004 9342     		cmp	r3, r2
  46 0006 04D8     		bhi	.L2
 449:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  47              		.loc 1 449 5 is_stmt 1 view .LVU10
  48              		.loc 1 449 14 is_stmt 0 view .LVU11
  49 0008 8068     		ldr	r0, [r0, #8]
  50              	.LVL3:
  51              		.loc 1 449 34 view .LVU12
  52 000a 801A     		subs	r0, r0, r2
  53              		.loc 1 449 42 view .LVU13
  54 000c 0344     		add	r3, r3, r0
  55              	.LVL4:
  56              		.loc 1 449 7 view .LVU14
  57 000e 581E     		subs	r0, r3, #1
  58              	.LVL5:
  59              		.loc 1 449 7 view .LVU15
  60 0010 7047     		bx	lr
  61              	.LVL6:
  62              	.L2:
 450:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 451:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  63              		.loc 1 451 5 is_stmt 1 view .LVU16
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 10


  64              		.loc 1 451 15 is_stmt 0 view .LVU17
  65 0012 9B1A     		subs	r3, r3, r2
  66              	.LVL7:
  67              		.loc 1 451 7 view .LVU18
  68 0014 581E     		subs	r0, r3, #1
  69              	.LVL8:
 452:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 453:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
  70              		.loc 1 453 3 is_stmt 1 view .LVU19
 454:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
  71              		.loc 1 454 1 is_stmt 0 view .LVU20
  72 0016 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE4:
  76              		.section	.text._WriteNoCheck,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu softvfp
  83              	_WriteNoCheck:
  84              	.LVL9:
  85              	.LFB2:
 378:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  86              		.loc 1 378 94 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
 378:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  90              		.loc 1 378 94 is_stmt 0 view .LVU22
  91 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  92              	.LCFI0:
  93              		.cfi_def_cfa_offset 32
  94              		.cfi_offset 3, -32
  95              		.cfi_offset 4, -28
  96              		.cfi_offset 5, -24
  97              		.cfi_offset 6, -20
  98              		.cfi_offset 7, -16
  99              		.cfi_offset 8, -12
 100              		.cfi_offset 9, -8
 101              		.cfi_offset 14, -4
 102 0004 0446     		mov	r4, r0
 103 0006 8846     		mov	r8, r1
 104 0008 1646     		mov	r6, r2
 379:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned WrOff;
 105              		.loc 1 379 3 is_stmt 1 view .LVU23
 380:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned Rem;
 106              		.loc 1 380 3 view .LVU24
 381:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 107              		.loc 1 381 3 view .LVU25
 383:ARM_SEGGER_RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 108              		.loc 1 383 3 view .LVU26
 383:ARM_SEGGER_RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 109              		.loc 1 383 9 is_stmt 0 view .LVU27
 110 000a C568     		ldr	r5, [r0, #12]
 111              	.LVL10:
 384:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 11


 112              		.loc 1 384 3 is_stmt 1 view .LVU28
 384:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 113              		.loc 1 384 14 is_stmt 0 view .LVU29
 114 000c 8768     		ldr	r7, [r0, #8]
 384:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 115              		.loc 1 384 7 view .LVU30
 116 000e A7EB0509 		sub	r9, r7, r5
 117              	.LVL11:
 385:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 118              		.loc 1 385 3 is_stmt 1 view .LVU31
 385:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 119              		.loc 1 385 6 is_stmt 0 view .LVU32
 120 0012 9145     		cmp	r9, r2
 121 0014 07D9     		bls	.L5
 389:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 122              		.loc 1 389 5 is_stmt 1 view .LVU33
 389:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 123              		.loc 1 389 17 is_stmt 0 view .LVU34
 124 0016 4068     		ldr	r0, [r0, #4]
 125              	.LVL12:
 389:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 126              		.loc 1 389 5 view .LVU35
 127 0018 2844     		add	r0, r0, r5
 128 001a FFF7FEFF 		bl	memcpy
 129              	.LVL13:
 390:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 130              		.loc 1 390 5 is_stmt 1 view .LVU36
 390:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 131              		.loc 1 390 26 is_stmt 0 view .LVU37
 132 001e 3544     		add	r5, r5, r6
 133              	.LVL14:
 390:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 134              		.loc 1 390 18 view .LVU38
 135 0020 E560     		str	r5, [r4, #12]
 136              	.L4:
 401:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 137              		.loc 1 401 1 view .LVU39
 138 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 139              	.LVL15:
 140              	.L5:
 395:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 141              		.loc 1 395 5 is_stmt 1 view .LVU40
 396:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 142              		.loc 1 396 5 view .LVU41
 396:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 143              		.loc 1 396 17 is_stmt 0 view .LVU42
 144 0026 4068     		ldr	r0, [r0, #4]
 145              	.LVL16:
 396:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 146              		.loc 1 396 5 view .LVU43
 147 0028 4A46     		mov	r2, r9
 148              	.LVL17:
 396:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 149              		.loc 1 396 5 view .LVU44
 150 002a 2844     		add	r0, r0, r5
 151 002c FFF7FEFF 		bl	memcpy
 152              	.LVL18:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 12


 397:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 153              		.loc 1 397 5 is_stmt 1 view .LVU45
 397:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 154              		.loc 1 397 20 is_stmt 0 view .LVU46
 155 0030 ED1B     		subs	r5, r5, r7
 156              	.LVL19:
 397:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 157              		.loc 1 397 20 view .LVU47
 158 0032 3544     		add	r5, r5, r6
 159              	.LVL20:
 398:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 160              		.loc 1 398 5 is_stmt 1 view .LVU48
 161 0034 2A46     		mov	r2, r5
 162 0036 08EB0901 		add	r1, r8, r9
 163 003a 6068     		ldr	r0, [r4, #4]
 164 003c FFF7FEFF 		bl	memcpy
 165              	.LVL21:
 399:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 166              		.loc 1 399 5 view .LVU49
 399:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 167              		.loc 1 399 18 is_stmt 0 view .LVU50
 168 0040 E560     		str	r5, [r4, #12]
 401:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 169              		.loc 1 401 1 view .LVU51
 170 0042 EEE7     		b	.L4
 171              		.cfi_endproc
 172              	.LFE2:
 174              		.section	.text._WriteBlocking,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	_WriteBlocking:
 182              	.LVL22:
 183              	.LFB1:
 327:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 184              		.loc 1 327 101 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 327:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 188              		.loc 1 327 101 is_stmt 0 view .LVU53
 189 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 190              	.LCFI1:
 191              		.cfi_def_cfa_offset 32
 192              		.cfi_offset 3, -32
 193              		.cfi_offset 4, -28
 194              		.cfi_offset 5, -24
 195              		.cfi_offset 6, -20
 196              		.cfi_offset 7, -16
 197              		.cfi_offset 8, -12
 198              		.cfi_offset 9, -8
 199              		.cfi_offset 14, -4
 200 0004 0646     		mov	r6, r0
 201 0006 8846     		mov	r8, r1
 202 0008 1746     		mov	r7, r2
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 13


 328:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 203              		.loc 1 328 3 is_stmt 1 view .LVU54
 329:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned RdOff;
 204              		.loc 1 329 3 view .LVU55
 330:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned WrOff;
 205              		.loc 1 330 3 view .LVU56
 331:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 206              		.loc 1 331 3 view .LVU57
 335:ARM_SEGGER_RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 207              		.loc 1 335 3 view .LVU58
 208              	.LVL23:
 336:ARM_SEGGER_RTT/SEGGER_RTT.c ****   do {
 209              		.loc 1 336 3 view .LVU59
 336:ARM_SEGGER_RTT/SEGGER_RTT.c ****   do {
 210              		.loc 1 336 9 is_stmt 0 view .LVU60
 211 000a C568     		ldr	r5, [r0, #12]
 212              	.LVL24:
 335:ARM_SEGGER_RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 213              		.loc 1 335 19 view .LVU61
 214 000c 4FF00009 		mov	r9, #0
 215 0010 18E0     		b	.L12
 216              	.LVL25:
 217              	.L17:
 340:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {
 218              		.loc 1 340 7 is_stmt 1 view .LVU62
 340:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {
 219              		.loc 1 340 31 is_stmt 0 view .LVU63
 220 0012 641B     		subs	r4, r4, r5
 221              	.LVL26:
 340:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {
 222              		.loc 1 340 23 view .LVU64
 223 0014 621E     		subs	r2, r4, #1
 224              	.LVL27:
 225              	.L10:
 344:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 226              		.loc 1 344 5 is_stmt 1 view .LVU65
 344:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 227              		.loc 1 344 23 is_stmt 0 view .LVU66
 228 0016 B368     		ldr	r3, [r6, #8]
 229 0018 5C1B     		subs	r4, r3, r5
 344:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 230              		.loc 1 344 21 view .LVU67
 231 001a 9442     		cmp	r4, r2
 232 001c 28BF     		it	cs
 233 001e 1446     		movcs	r4, r2
 234              	.LVL28:
 345:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 235              		.loc 1 345 5 is_stmt 1 view .LVU68
 345:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 236              		.loc 1 345 21 is_stmt 0 view .LVU69
 237 0020 BC42     		cmp	r4, r7
 238 0022 28BF     		it	cs
 239 0024 3C46     		movcs	r4, r7
 240              	.LVL29:
 346:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 241              		.loc 1 346 5 is_stmt 1 view .LVU70
 346:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 14


 242              		.loc 1 346 17 is_stmt 0 view .LVU71
 243 0026 7068     		ldr	r0, [r6, #4]
 346:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 244              		.loc 1 346 5 view .LVU72
 245 0028 2246     		mov	r2, r4
 246 002a 4146     		mov	r1, r8
 247 002c 2844     		add	r0, r0, r5
 248 002e FFF7FEFF 		bl	memcpy
 249              	.LVL30:
 347:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 250              		.loc 1 347 5 is_stmt 1 view .LVU73
 347:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 251              		.loc 1 347 21 is_stmt 0 view .LVU74
 252 0032 A144     		add	r9, r9, r4
 253              	.LVL31:
 348:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 254              		.loc 1 348 5 is_stmt 1 view .LVU75
 348:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 255              		.loc 1 348 21 is_stmt 0 view .LVU76
 256 0034 A044     		add	r8, r8, r4
 257              	.LVL32:
 349:ARM_SEGGER_RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 258              		.loc 1 349 5 is_stmt 1 view .LVU77
 349:ARM_SEGGER_RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 259              		.loc 1 349 21 is_stmt 0 view .LVU78
 260 0036 3F1B     		subs	r7, r7, r4
 261              	.LVL33:
 350:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 262              		.loc 1 350 5 is_stmt 1 view .LVU79
 350:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 263              		.loc 1 350 21 is_stmt 0 view .LVU80
 264 0038 2544     		add	r5, r5, r4
 265              	.LVL34:
 351:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff = 0u;
 266              		.loc 1 351 5 is_stmt 1 view .LVU81
 351:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff = 0u;
 267              		.loc 1 351 23 is_stmt 0 view .LVU82
 268 003a B368     		ldr	r3, [r6, #8]
 351:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff = 0u;
 269              		.loc 1 351 8 view .LVU83
 270 003c AB42     		cmp	r3, r5
 271 003e 09D0     		beq	.L15
 272              	.LVL35:
 273              	.L11:
 354:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } while (NumBytes);
 274              		.loc 1 354 5 is_stmt 1 view .LVU84
 354:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } while (NumBytes);
 275              		.loc 1 354 18 is_stmt 0 view .LVU85
 276 0040 F560     		str	r5, [r6, #12]
 355:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 277              		.loc 1 355 11 is_stmt 1 view .LVU86
 355:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 278              		.loc 1 355 3 is_stmt 0 view .LVU87
 279 0042 4FB1     		cbz	r7, .L16
 280              	.LVL36:
 281              	.L12:
 337:ARM_SEGGER_RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 15


 282              		.loc 1 337 3 is_stmt 1 view .LVU88
 338:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 283              		.loc 1 338 5 view .LVU89
 338:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 284              		.loc 1 338 11 is_stmt 0 view .LVU90
 285 0044 3469     		ldr	r4, [r6, #16]
 286              	.LVL37:
 339:ARM_SEGGER_RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 287              		.loc 1 339 5 is_stmt 1 view .LVU91
 339:ARM_SEGGER_RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 288              		.loc 1 339 8 is_stmt 0 view .LVU92
 289 0046 A542     		cmp	r5, r4
 290 0048 E3D3     		bcc	.L17
 342:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 291              		.loc 1 342 7 is_stmt 1 view .LVU93
 342:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 292              		.loc 1 342 30 is_stmt 0 view .LVU94
 293 004a B268     		ldr	r2, [r6, #8]
 342:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 294              		.loc 1 342 62 view .LVU95
 295 004c 641B     		subs	r4, r4, r5
 296              	.LVL38:
 342:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 297              		.loc 1 342 45 view .LVU96
 298 004e 1444     		add	r4, r4, r2
 342:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 299              		.loc 1 342 23 view .LVU97
 300 0050 621E     		subs	r2, r4, #1
 301              	.LVL39:
 342:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 302              		.loc 1 342 23 view .LVU98
 303 0052 E0E7     		b	.L10
 304              	.LVL40:
 305              	.L15:
 352:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 306              		.loc 1 352 13 view .LVU99
 307 0054 0025     		movs	r5, #0
 308              	.LVL41:
 352:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 309              		.loc 1 352 13 view .LVU100
 310 0056 F3E7     		b	.L11
 311              	.LVL42:
 312              	.L16:
 357:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 313              		.loc 1 357 3 is_stmt 1 view .LVU101
 358:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 314              		.loc 1 358 1 is_stmt 0 view .LVU102
 315 0058 4846     		mov	r0, r9
 316 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 358:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 317              		.loc 1 358 1 view .LVU103
 318              		.cfi_endproc
 319              	.LFE1:
 321              		.section	.text._PostTerminalSwitch,"ax",%progbits
 322              		.align	1
 323              		.syntax unified
 324              		.thumb
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 16


 325              		.thumb_func
 326              		.fpu softvfp
 328              	_PostTerminalSwitch:
 329              	.LVL43:
 330              	.LFB3:
 416:ARM_SEGGER_RTT/SEGGER_RTT.c ****   char ac[2];
 331              		.loc 1 416 88 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 8
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 416:ARM_SEGGER_RTT/SEGGER_RTT.c ****   char ac[2];
 335              		.loc 1 416 88 is_stmt 0 view .LVU105
 336 0000 00B5     		push	{lr}
 337              	.LCFI2:
 338              		.cfi_def_cfa_offset 4
 339              		.cfi_offset 14, -4
 340 0002 83B0     		sub	sp, sp, #12
 341              	.LCFI3:
 342              		.cfi_def_cfa_offset 16
 417:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 343              		.loc 1 417 3 is_stmt 1 view .LVU106
 419:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 344              		.loc 1 419 3 view .LVU107
 419:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 345              		.loc 1 419 9 is_stmt 0 view .LVU108
 346 0004 FF23     		movs	r3, #255
 347 0006 8DF80430 		strb	r3, [sp, #4]
 420:ARM_SEGGER_RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, ac, 2u);
 348              		.loc 1 420 3 is_stmt 1 view .LVU109
 420:ARM_SEGGER_RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, ac, 2u);
 349              		.loc 1 420 23 is_stmt 0 view .LVU110
 350 000a 054B     		ldr	r3, .L20
 351 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 420:ARM_SEGGER_RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, ac, 2u);
 352              		.loc 1 420 9 view .LVU111
 353 000e 8DF80530 		strb	r3, [sp, #5]
 421:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 354              		.loc 1 421 3 is_stmt 1 view .LVU112
 355 0012 0222     		movs	r2, #2
 356 0014 01A9     		add	r1, sp, #4
 357              	.LVL44:
 421:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 358              		.loc 1 421 3 is_stmt 0 view .LVU113
 359 0016 FFF7FEFF 		bl	_WriteBlocking
 360              	.LVL45:
 422:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 361              		.loc 1 422 1 view .LVU114
 362 001a 03B0     		add	sp, sp, #12
 363              	.LCFI4:
 364              		.cfi_def_cfa_offset 4
 365              		@ sp needed
 366 001c 5DF804FB 		ldr	pc, [sp], #4
 367              	.L21:
 368              		.align	2
 369              	.L20:
 370 0020 00000000 		.word	.LANCHOR0
 371              		.cfi_endproc
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 17


 372              	.LFE3:
 374              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 375              		.align	2
 376              	.LC0:
 377 0000 5465726D 		.ascii	"Terminal\000"
 377      696E616C 
 377      00
 378 0009 000000   		.align	2
 379              	.LC1:
 380 000c 52545400 		.ascii	"RTT\000"
 381              		.align	2
 382              	.LC2:
 383 0010 53454747 		.ascii	"SEGGER\000"
 383      455200
 384              		.section	.text._DoInit,"ax",%progbits
 385              		.align	1
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu softvfp
 391              	_DoInit:
 392              	.LFB0:
 272:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 393              		.loc 1 272 27 is_stmt 1 view -0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 273:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 398              		.loc 1 273 3 view .LVU116
 277:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 399              		.loc 1 277 3 view .LVU117
 400              	.LVL46:
 278:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 401              		.loc 1 278 3 view .LVU118
 278:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 402              		.loc 1 278 25 is_stmt 0 view .LVU119
 403 0000 114B     		ldr	r3, .L23
 404 0002 0322     		movs	r2, #3
 405 0004 1A61     		str	r2, [r3, #16]
 279:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 406              		.loc 1 279 3 is_stmt 1 view .LVU120
 279:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 407              		.loc 1 279 25 is_stmt 0 view .LVU121
 408 0006 5A61     		str	r2, [r3, #20]
 283:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 409              		.loc 1 283 3 is_stmt 1 view .LVU122
 283:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 410              		.loc 1 283 27 is_stmt 0 view .LVU123
 411 0008 1049     		ldr	r1, .L23+4
 412 000a 9961     		str	r1, [r3, #24]
 284:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 413              		.loc 1 284 3 is_stmt 1 view .LVU124
 284:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 414              		.loc 1 284 27 is_stmt 0 view .LVU125
 415 000c 104A     		ldr	r2, .L23+8
 416 000e DA61     		str	r2, [r3, #28]
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 18


 285:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 417              		.loc 1 285 3 is_stmt 1 view .LVU126
 285:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 418              		.loc 1 285 27 is_stmt 0 view .LVU127
 419 0010 4FF48062 		mov	r2, #1024
 420 0014 1A62     		str	r2, [r3, #32]
 286:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 421              		.loc 1 286 3 is_stmt 1 view .LVU128
 286:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 422              		.loc 1 286 27 is_stmt 0 view .LVU129
 423 0016 0022     		movs	r2, #0
 424 0018 9A62     		str	r2, [r3, #40]
 287:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 425              		.loc 1 287 3 is_stmt 1 view .LVU130
 287:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 426              		.loc 1 287 27 is_stmt 0 view .LVU131
 427 001a 5A62     		str	r2, [r3, #36]
 288:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 428              		.loc 1 288 3 is_stmt 1 view .LVU132
 288:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 429              		.loc 1 288 27 is_stmt 0 view .LVU133
 430 001c DA62     		str	r2, [r3, #44]
 292:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 431              		.loc 1 292 3 is_stmt 1 view .LVU134
 292:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 432              		.loc 1 292 29 is_stmt 0 view .LVU135
 433 001e 1966     		str	r1, [r3, #96]
 293:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 434              		.loc 1 293 3 is_stmt 1 view .LVU136
 293:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 435              		.loc 1 293 29 is_stmt 0 view .LVU137
 436 0020 0C49     		ldr	r1, .L23+12
 437 0022 5966     		str	r1, [r3, #100]
 294:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 438              		.loc 1 294 3 is_stmt 1 view .LVU138
 294:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 439              		.loc 1 294 29 is_stmt 0 view .LVU139
 440 0024 1021     		movs	r1, #16
 441 0026 9966     		str	r1, [r3, #104]
 295:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 442              		.loc 1 295 3 is_stmt 1 view .LVU140
 295:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 443              		.loc 1 295 29 is_stmt 0 view .LVU141
 444 0028 1A67     		str	r2, [r3, #112]
 296:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 445              		.loc 1 296 3 is_stmt 1 view .LVU142
 296:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 446              		.loc 1 296 29 is_stmt 0 view .LVU143
 447 002a DA66     		str	r2, [r3, #108]
 297:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 448              		.loc 1 297 3 is_stmt 1 view .LVU144
 297:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 449              		.loc 1 297 29 is_stmt 0 view .LVU145
 450 002c 5A67     		str	r2, [r3, #116]
 303:ARM_SEGGER_RTT/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 451              		.loc 1 303 3 is_stmt 1 view .LVU146
 452 002e 0A4A     		ldr	r2, .L23+16
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 19


 453 0030 1068     		ldr	r0, [r2]
 454 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 304:ARM_SEGGER_RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 455              		.loc 1 304 3 view .LVU147
 456 0036 094A     		ldr	r2, .L23+20
 457 0038 92E80300 		ldm	r2, {r0, r1}
 458 003c 1860     		str	r0, [r3]
 459 003e 9980     		strh	r1, [r3, #4]	@ movhi
 305:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 460              		.loc 1 305 3 view .LVU148
 305:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 461              		.loc 1 305 14 is_stmt 0 view .LVU149
 462 0040 2022     		movs	r2, #32
 463 0042 9A71     		strb	r2, [r3, #6]
 306:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 464              		.loc 1 306 1 view .LVU150
 465 0044 7047     		bx	lr
 466              	.L24:
 467 0046 00BF     		.align	2
 468              	.L23:
 469 0048 00000000 		.word	_SEGGER_RTT
 470 004c 00000000 		.word	.LC0
 471 0050 00000000 		.word	.LANCHOR1
 472 0054 00000000 		.word	.LANCHOR2
 473 0058 0C000000 		.word	.LC1
 474 005c 10000000 		.word	.LC2
 475              		.cfi_endproc
 476              	.LFE0:
 478              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 479              		.align	1
 480              		.global	SEGGER_RTT_ReadNoLock
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu softvfp
 486              	SEGGER_RTT_ReadNoLock:
 487              	.LVL47:
 488              	.LFB5:
 455:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 456:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 457:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 458:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       Public code
 459:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 460:ARM_SEGGER_RTT/SEGGER_RTT.c **** **********************************************************************
 461:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 462:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 463:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 464:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 465:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 466:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 467:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 468:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 469:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 470:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 471:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 472:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 473:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 20


 474:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 475:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 476:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 477:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 478:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 479:ARM_SEGGER_RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 489              		.loc 1 479 88 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		.loc 1 479 88 is_stmt 0 view .LVU152
 494 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 32
 497              		.cfi_offset 4, -32
 498              		.cfi_offset 5, -28
 499              		.cfi_offset 6, -24
 500              		.cfi_offset 7, -20
 501              		.cfi_offset 8, -16
 502              		.cfi_offset 9, -12
 503              		.cfi_offset 10, -8
 504              		.cfi_offset 14, -4
 505 0004 0446     		mov	r4, r0
 506 0006 8846     		mov	r8, r1
 507 0008 9146     		mov	r9, r2
 480:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 508              		.loc 1 480 3 is_stmt 1 view .LVU153
 481:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 509              		.loc 1 481 3 view .LVU154
 482:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 510              		.loc 1 482 3 view .LVU155
 483:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 511              		.loc 1 483 3 view .LVU156
 484:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 512              		.loc 1 484 3 view .LVU157
 485:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 513              		.loc 1 485 3 view .LVU158
 486:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 487:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 514              		.loc 1 487 3 view .LVU159
 515              		.loc 1 487 3 view .LVU160
 516 000a 244B     		ldr	r3, .L36
 517 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 000e C3B1     		cbz	r3, .L33
 519              	.LVL48:
 520              	.L26:
 521              		.loc 1 487 3 discriminator 3 view .LVU161
 488:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 522              		.loc 1 488 3 discriminator 3 view .LVU162
 489:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 523              		.loc 1 489 3 discriminator 3 view .LVU163
 490:ARM_SEGGER_RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 524              		.loc 1 490 3 discriminator 3 view .LVU164
 525              		.loc 1 490 9 is_stmt 0 discriminator 3 view .LVU165
 526 0010 04EB4403 		add	r3, r4, r4, lsl #1
 527 0014 214A     		ldr	r2, .L36
 528 0016 02EBC303 		add	r3, r2, r3, lsl #3
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 21


 529 001a 1F6F     		ldr	r7, [r3, #112]
 530              	.LVL49:
 491:ARM_SEGGER_RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 531              		.loc 1 491 3 is_stmt 1 discriminator 3 view .LVU166
 532              		.loc 1 491 9 is_stmt 0 discriminator 3 view .LVU167
 533 001c DD6E     		ldr	r5, [r3, #108]
 534              	.LVL50:
 492:ARM_SEGGER_RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 535              		.loc 1 492 3 is_stmt 1 discriminator 3 view .LVU168
 493:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 494:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 495:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 496:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 536              		.loc 1 496 3 discriminator 3 view .LVU169
 537              		.loc 1 496 6 is_stmt 0 discriminator 3 view .LVU170
 538 001e AF42     		cmp	r7, r5
 539 0020 12D8     		bhi	.L34
 492:ARM_SEGGER_RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 540              		.loc 1 492 16 view .LVU171
 541 0022 0026     		movs	r6, #0
 542              	.LVL51:
 543              	.L27:
 497:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 498:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 499:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 500:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 501:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 502:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 503:ARM_SEGGER_RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 504:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 505:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 506:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 507:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 508:ARM_SEGGER_RTT/SEGGER_RTT.c ****       RdOff = 0u;
 509:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 510:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 511:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 512:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 513:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 514:ARM_SEGGER_RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 544              		.loc 1 514 3 is_stmt 1 view .LVU172
 545              		.loc 1 514 15 is_stmt 0 view .LVU173
 546 0024 ED1B     		subs	r5, r5, r7
 547              	.LVL52:
 515:ARM_SEGGER_RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 548              		.loc 1 515 3 is_stmt 1 view .LVU174
 549              		.loc 1 515 15 is_stmt 0 view .LVU175
 550 0026 4D45     		cmp	r5, r9
 551 0028 28BF     		it	cs
 552 002a 4D46     		movcs	r5, r9
 553              	.LVL53:
 516:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 554              		.loc 1 516 3 is_stmt 1 view .LVU176
 555              		.loc 1 516 6 is_stmt 0 view .LVU177
 556 002c 3DBB     		cbnz	r5, .L35
 557              	.LVL54:
 558              	.L28:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 22


 517:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 518:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 519:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 520:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 521:ARM_SEGGER_RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 522:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 523:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 559              		.loc 1 523 3 is_stmt 1 view .LVU178
 560              		.loc 1 523 6 is_stmt 0 view .LVU179
 561 002e 2EB1     		cbz	r6, .L25
 524:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 562              		.loc 1 524 5 is_stmt 1 view .LVU180
 563              		.loc 1 524 18 is_stmt 0 view .LVU181
 564 0030 04EB4404 		add	r4, r4, r4, lsl #1
 565              	.LVL55:
 566              		.loc 1 524 18 view .LVU182
 567 0034 1948     		ldr	r0, .L36
 568 0036 00EBC404 		add	r4, r0, r4, lsl #3
 569 003a 2767     		str	r7, [r4, #112]
 525:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 526:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 527:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return NumBytesRead;
 570              		.loc 1 527 3 is_stmt 1 view .LVU183
 571              	.L25:
 528:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 572              		.loc 1 528 1 is_stmt 0 view .LVU184
 573 003c 3046     		mov	r0, r6
 574 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 575              	.LVL56:
 576              	.L33:
 487:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 577              		.loc 1 487 3 is_stmt 1 discriminator 1 view .LVU185
 578 0042 FFF7FEFF 		bl	_DoInit
 579              	.LVL57:
 487:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 580              		.loc 1 487 3 is_stmt 0 discriminator 1 view .LVU186
 581 0046 E3E7     		b	.L26
 582              	.LVL58:
 583              	.L34:
 497:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 584              		.loc 1 497 5 is_stmt 1 view .LVU187
 497:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 585              		.loc 1 497 24 is_stmt 0 view .LVU188
 586 0048 04EB440A 		add	r10, r4, r4, lsl #1
 587 004c 02EBCA0A 		add	r10, r2, r10, lsl #3
 588 0050 DAF86860 		ldr	r6, [r10, #104]
 497:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 589              		.loc 1 497 17 view .LVU189
 590 0054 F61B     		subs	r6, r6, r7
 591              	.LVL59:
 498:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 592              		.loc 1 498 5 is_stmt 1 view .LVU190
 498:ARM_SEGGER_RTT/SEGGER_RTT.c ****     memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 593              		.loc 1 498 17 is_stmt 0 view .LVU191
 594 0056 4E45     		cmp	r6, r9
 595 0058 28BF     		it	cs
 596 005a 4E46     		movcs	r6, r9
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 23


 597              	.LVL60:
 499:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 598              		.loc 1 499 5 is_stmt 1 view .LVU192
 499:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 599              		.loc 1 499 26 is_stmt 0 view .LVU193
 600 005c DAF86410 		ldr	r1, [r10, #100]
 499:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 601              		.loc 1 499 5 view .LVU194
 602 0060 3246     		mov	r2, r6
 603 0062 3944     		add	r1, r1, r7
 604 0064 4046     		mov	r0, r8
 605 0066 FFF7FEFF 		bl	memcpy
 606              	.LVL61:
 500:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 607              		.loc 1 500 5 is_stmt 1 view .LVU195
 501:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 608              		.loc 1 501 5 view .LVU196
 501:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 609              		.loc 1 501 18 is_stmt 0 view .LVU197
 610 006a B044     		add	r8, r8, r6
 611              	.LVL62:
 502:ARM_SEGGER_RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 612              		.loc 1 502 5 is_stmt 1 view .LVU198
 502:ARM_SEGGER_RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 613              		.loc 1 502 18 is_stmt 0 view .LVU199
 614 006c A9EB0609 		sub	r9, r9, r6
 615              	.LVL63:
 503:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 616              		.loc 1 503 5 is_stmt 1 view .LVU200
 503:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 617              		.loc 1 503 18 is_stmt 0 view .LVU201
 618 0070 3744     		add	r7, r7, r6
 619              	.LVL64:
 507:ARM_SEGGER_RTT/SEGGER_RTT.c ****       RdOff = 0u;
 620              		.loc 1 507 5 is_stmt 1 view .LVU202
 507:ARM_SEGGER_RTT/SEGGER_RTT.c ****       RdOff = 0u;
 621              		.loc 1 507 23 is_stmt 0 view .LVU203
 622 0072 DAF86830 		ldr	r3, [r10, #104]
 507:ARM_SEGGER_RTT/SEGGER_RTT.c ****       RdOff = 0u;
 623              		.loc 1 507 8 view .LVU204
 624 0076 BB42     		cmp	r3, r7
 625 0078 D4D1     		bne	.L27
 508:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 626              		.loc 1 508 13 view .LVU205
 627 007a 0027     		movs	r7, #0
 628              	.LVL65:
 508:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 629              		.loc 1 508 13 view .LVU206
 630 007c D2E7     		b	.L27
 631              	.LVL66:
 632              	.L35:
 517:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 633              		.loc 1 517 5 is_stmt 1 view .LVU207
 517:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 634              		.loc 1 517 26 is_stmt 0 view .LVU208
 635 007e 04EB4403 		add	r3, r4, r4, lsl #1
 636 0082 064A     		ldr	r2, .L36
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 24


 637 0084 02EBC303 		add	r3, r2, r3, lsl #3
 638 0088 596E     		ldr	r1, [r3, #100]
 517:ARM_SEGGER_RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 639              		.loc 1 517 5 view .LVU209
 640 008a 2A46     		mov	r2, r5
 641 008c 3944     		add	r1, r1, r7
 642 008e 4046     		mov	r0, r8
 643 0090 FFF7FEFF 		bl	memcpy
 644              	.LVL67:
 518:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 645              		.loc 1 518 5 is_stmt 1 view .LVU210
 518:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 646              		.loc 1 518 18 is_stmt 0 view .LVU211
 647 0094 2E44     		add	r6, r6, r5
 648              	.LVL68:
 519:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 649              		.loc 1 519 5 is_stmt 1 view .LVU212
 520:ARM_SEGGER_RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 650              		.loc 1 520 5 view .LVU213
 521:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 651              		.loc 1 521 5 view .LVU214
 521:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 652              		.loc 1 521 18 is_stmt 0 view .LVU215
 653 0096 2F44     		add	r7, r7, r5
 654              	.LVL69:
 521:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 655              		.loc 1 521 18 view .LVU216
 656 0098 C9E7     		b	.L28
 657              	.L37:
 658 009a 00BF     		.align	2
 659              	.L36:
 660 009c 00000000 		.word	_SEGGER_RTT
 661              		.cfi_endproc
 662              	.LFE5:
 664              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 665              		.align	1
 666              		.global	SEGGER_RTT_Read
 667              		.syntax unified
 668              		.thumb
 669              		.thumb_func
 670              		.fpu softvfp
 672              	SEGGER_RTT_Read:
 673              	.LVL70:
 674              	.LFB6:
 529:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 530:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 531:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 532:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 533:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 534:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 535:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 536:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 537:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 538:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 539:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 540:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 541:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 25


 542:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 543:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 544:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 545:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 546:ARM_SEGGER_RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 675              		.loc 1 546 84 is_stmt 1 view -0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		.loc 1 546 84 is_stmt 0 view .LVU218
 680 0000 10B5     		push	{r4, lr}
 681              	.LCFI6:
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 4, -8
 684              		.cfi_offset 14, -4
 685 0002 0B46     		mov	r3, r1
 547:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 686              		.loc 1 547 3 is_stmt 1 view .LVU219
 687              	.LBB2:
 548:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 549:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 688              		.loc 1 549 3 view .LVU220
 689              		.loc 1 549 3 view .LVU221
 690              		.syntax unified
 691              	@ 549 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 692 0004 EFF31184 		mrs   r4, basepri  
 693 0008 4FF02001 		mov   r1, #32       
 694 000c 81F31188 		msr   basepri, r1  
 695              		
 696              	@ 0 "" 2
 697              	.LVL71:
 698              		.loc 1 549 20 view .LVU222
 550:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 551:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 552:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 553:ARM_SEGGER_RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 699              		.loc 1 553 3 view .LVU223
 700              		.loc 1 553 18 is_stmt 0 view .LVU224
 701              		.thumb
 702              		.syntax unified
 703 0010 1946     		mov	r1, r3
 704 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 705              	.LVL72:
 554:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 555:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Finish up.
 556:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 557:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 706              		.loc 1 557 3 is_stmt 1 view .LVU225
 707              		.syntax unified
 708              	@ 557 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 709 0016 84F31188 		msr   basepri, r4  
 710              		
 711              	@ 0 "" 2
 712              		.thumb
 713              		.syntax unified
 714              	.LBE2:
 715              		.loc 1 557 22 view .LVU226
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 26


 558:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 559:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return NumBytesRead;
 716              		.loc 1 559 3 view .LVU227
 560:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 717              		.loc 1 560 1 is_stmt 0 view .LVU228
 718 001a 10BD     		pop	{r4, pc}
 719              		.loc 1 560 1 view .LVU229
 720              		.cfi_endproc
 721              	.LFE6:
 723              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 724              		.align	1
 725              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 729              		.fpu softvfp
 731              	SEGGER_RTT_WriteWithOverwriteNoLock:
 732              	.LVL73:
 733              	.LFB7:
 561:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 562:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 563:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 564:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 565:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 566:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 567:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 568:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    control block.
 569:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 570:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 571:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 572:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 573:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 574:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 575:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 576:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 577:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 578:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 579:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 580:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 581:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 582:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 583:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        connection reads RTT data.
 584:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 585:ARM_SEGGER_RTT/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 734              		.loc 1 585 104 is_stmt 1 view -0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 0
 737              		@ frame_needed = 0, uses_anonymous_args = 0
 738              		.loc 1 585 104 is_stmt 0 view .LVU231
 739 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 740              	.LCFI7:
 741              		.cfi_def_cfa_offset 24
 742              		.cfi_offset 4, -24
 743              		.cfi_offset 5, -20
 744              		.cfi_offset 6, -16
 745              		.cfi_offset 7, -12
 746              		.cfi_offset 8, -8
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 27


 747              		.cfi_offset 14, -4
 748 0004 0646     		mov	r6, r0
 749 0006 8846     		mov	r8, r1
 750 0008 1746     		mov	r7, r2
 586:ARM_SEGGER_RTT/SEGGER_RTT.c ****   const char*           pData;
 751              		.loc 1 586 3 is_stmt 1 view .LVU232
 587:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 752              		.loc 1 587 3 view .LVU233
 588:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              Avail;
 753              		.loc 1 588 3 view .LVU234
 589:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 590:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 754              		.loc 1 590 3 view .LVU235
 755              	.LVL74:
 591:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 592:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 593:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 594:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 756              		.loc 1 594 3 view .LVU236
 595:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 596:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 597:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 598:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 757              		.loc 1 598 3 view .LVU237
 758              		.loc 1 598 12 is_stmt 0 view .LVU238
 759 000a 00EB4002 		add	r2, r0, r0, lsl #1
 760              	.LVL75:
 761              		.loc 1 598 12 view .LVU239
 762 000e 424B     		ldr	r3, .L54
 763 0010 03EBC203 		add	r3, r3, r2, lsl #3
 764 0014 596A     		ldr	r1, [r3, #36]
 765              	.LVL76:
 766              		.loc 1 598 28 view .LVU240
 767 0016 9B6A     		ldr	r3, [r3, #40]
 768              		.loc 1 598 6 view .LVU241
 769 0018 9942     		cmp	r1, r3
 770 001a 0FD0     		beq	.L52
 599:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 600:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 771              		.loc 1 600 10 is_stmt 1 view .LVU242
 772              		.loc 1 600 35 is_stmt 0 view .LVU243
 773 001c 00EB4003 		add	r3, r0, r0, lsl #1
 774 0020 3D4A     		ldr	r2, .L54
 775 0022 02EBC303 		add	r3, r2, r3, lsl #3
 776 0026 9B6A     		ldr	r3, [r3, #40]
 777              		.loc 1 600 13 view .LVU244
 778 0028 9942     		cmp	r1, r3
 779 002a 19D2     		bcs	.L43
 601:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 780              		.loc 1 601 5 is_stmt 1 view .LVU245
 781              		.loc 1 601 18 is_stmt 0 view .LVU246
 782 002c 00EB4003 		add	r3, r0, r0, lsl #1
 783 0030 02EBC303 		add	r3, r2, r3, lsl #3
 784 0034 9B6A     		ldr	r3, [r3, #40]
 785              		.loc 1 601 26 view .LVU247
 786 0036 5B1A     		subs	r3, r3, r1
 787              		.loc 1 601 11 view .LVU248
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 28


 788 0038 013B     		subs	r3, r3, #1
 789              	.LVL77:
 790              		.loc 1 601 11 view .LVU249
 791 003a 05E0     		b	.L42
 792              	.LVL78:
 793              	.L52:
 599:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 794              		.loc 1 599 5 is_stmt 1 view .LVU250
 599:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 795              		.loc 1 599 18 is_stmt 0 view .LVU251
 796 003c 1346     		mov	r3, r2
 797 003e 364A     		ldr	r2, .L54
 798 0040 02EBC303 		add	r3, r2, r3, lsl #3
 799 0044 1B6A     		ldr	r3, [r3, #32]
 599:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 800              		.loc 1 599 11 view .LVU252
 801 0046 013B     		subs	r3, r3, #1
 802              	.LVL79:
 803              	.L42:
 602:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 604:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 605:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 804              		.loc 1 605 3 is_stmt 1 view .LVU253
 805              		.loc 1 605 6 is_stmt 0 view .LVU254
 806 0048 BB42     		cmp	r3, r7
 807 004a 25D2     		bcs	.L44
 606:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 808              		.loc 1 606 5 is_stmt 1 view .LVU255
 809              		.loc 1 606 18 is_stmt 0 view .LVU256
 810 004c 06EB4602 		add	r2, r6, r6, lsl #1
 811 0050 3148     		ldr	r0, .L54
 812              	.LVL80:
 813              		.loc 1 606 18 view .LVU257
 814 0052 00EBC202 		add	r2, r0, r2, lsl #3
 815 0056 906A     		ldr	r0, [r2, #40]
 816              		.loc 1 606 31 view .LVU258
 817 0058 FB1A     		subs	r3, r7, r3
 818              	.LVL81:
 819              		.loc 1 606 18 view .LVU259
 820 005a 0344     		add	r3, r3, r0
 821 005c 9362     		str	r3, [r2, #40]
 607:ARM_SEGGER_RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 822              		.loc 1 607 5 is_stmt 1 view .LVU260
 823              		.loc 1 607 11 is_stmt 0 view .LVU261
 824 005e 12E0     		b	.L45
 825              	.LVL82:
 826              	.L43:
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 827              		.loc 1 603 5 is_stmt 1 view .LVU262
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 828              		.loc 1 603 18 is_stmt 0 view .LVU263
 829 0060 00EB4002 		add	r2, r0, r0, lsl #1
 830 0064 2C4B     		ldr	r3, .L54
 831 0066 03EBC202 		add	r2, r3, r2, lsl #3
 832 006a 936A     		ldr	r3, [r2, #40]
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 29


 833              		.loc 1 603 26 view .LVU264
 834 006c 5B1A     		subs	r3, r3, r1
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 835              		.loc 1 603 53 view .LVU265
 836 006e 126A     		ldr	r2, [r2, #32]
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 837              		.loc 1 603 46 view .LVU266
 838 0070 1344     		add	r3, r3, r2
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 839              		.loc 1 603 11 view .LVU267
 840 0072 013B     		subs	r3, r3, #1
 841              	.LVL83:
 603:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 842              		.loc 1 603 11 view .LVU268
 843 0074 E8E7     		b	.L42
 844              	.LVL84:
 845              	.L46:
 608:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 846              		.loc 1 608 7 is_stmt 1 view .LVU269
 847              		.loc 1 608 20 is_stmt 0 view .LVU270
 848 0076 06EB4603 		add	r3, r6, r6, lsl #1
 849 007a 274A     		ldr	r2, .L54
 850 007c 02EBC303 		add	r3, r2, r3, lsl #3
 851 0080 9A6A     		ldr	r2, [r3, #40]
 852 0082 121A     		subs	r2, r2, r0
 853 0084 9A62     		str	r2, [r3, #40]
 854              	.L45:
 607:ARM_SEGGER_RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 855              		.loc 1 607 11 is_stmt 1 view .LVU271
 607:ARM_SEGGER_RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 856              		.loc 1 607 17 is_stmt 0 view .LVU272
 857 0086 06EB4603 		add	r3, r6, r6, lsl #1
 858 008a 234A     		ldr	r2, .L54
 859 008c 02EBC303 		add	r3, r2, r3, lsl #3
 860 0090 9A6A     		ldr	r2, [r3, #40]
 607:ARM_SEGGER_RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 861              		.loc 1 607 33 view .LVU273
 862 0092 186A     		ldr	r0, [r3, #32]
 607:ARM_SEGGER_RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 863              		.loc 1 607 11 view .LVU274
 864 0094 8242     		cmp	r2, r0
 865 0096 EED2     		bcs	.L46
 866              	.L44:
 609:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 610:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 611:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 612:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 613:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 614:ARM_SEGGER_RTT/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 867              		.loc 1 614 3 is_stmt 1 view .LVU275
 868              		.loc 1 614 16 is_stmt 0 view .LVU276
 869 0098 06EB4603 		add	r3, r6, r6, lsl #1
 870 009c 1E4A     		ldr	r2, .L54
 871 009e 02EBC303 		add	r3, r2, r3, lsl #3
 872 00a2 1C6A     		ldr	r4, [r3, #32]
 873              		.loc 1 614 9 view .LVU277
 874 00a4 641A     		subs	r4, r4, r1
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 30


 875              	.LVL85:
 876              	.L50:
 615:ARM_SEGGER_RTT/SEGGER_RTT.c ****   do {
 877              		.loc 1 615 3 is_stmt 1 view .LVU278
 616:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 878              		.loc 1 616 5 view .LVU279
 879              		.loc 1 616 8 is_stmt 0 view .LVU280
 880 00a6 A742     		cmp	r7, r4
 881 00a8 19D3     		bcc	.L53
 617:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
 618:ARM_SEGGER_RTT/SEGGER_RTT.c ****       // Last round
 619:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
 620:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts.
 621:ARM_SEGGER_RTT/SEGGER_RTT.c ****       char* pDst;
 622:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 623:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 624:ARM_SEGGER_RTT/SEGGER_RTT.c ****       do {
 625:ARM_SEGGER_RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 626:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
 627:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 628:ARM_SEGGER_RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 629:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 630:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 631:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;  //Alternatively: NumBytes = 0;
 632:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {
 633:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
 634:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 635:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
 636:ARM_SEGGER_RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + pRing->WrOff, pData, Avail);
 882              		.loc 1 636 7 is_stmt 1 view .LVU281
 883              		.loc 1 636 19 is_stmt 0 view .LVU282
 884 00aa 1B4D     		ldr	r5, .L54
 885 00ac 731C     		adds	r3, r6, #1
 886 00ae 03EB4303 		add	r3, r3, r3, lsl #1
 887 00b2 05EBC303 		add	r3, r5, r3, lsl #3
 888 00b6 5868     		ldr	r0, [r3, #4]
 889              		.loc 1 636 36 view .LVU283
 890 00b8 06EB4603 		add	r3, r6, r6, lsl #1
 891 00bc 05EBC305 		add	r5, r5, r3, lsl #3
 892 00c0 6B6A     		ldr	r3, [r5, #36]
 893              		.loc 1 636 7 view .LVU284
 894 00c2 2246     		mov	r2, r4
 895 00c4 4146     		mov	r1, r8
 896 00c6 1844     		add	r0, r0, r3
 897 00c8 FFF7FEFF 		bl	memcpy
 898              	.LVL86:
 637:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pData += Avail;
 899              		.loc 1 637 7 is_stmt 1 view .LVU285
 900              		.loc 1 637 13 is_stmt 0 view .LVU286
 901 00cc A044     		add	r8, r8, r4
 902              	.LVL87:
 638:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 903              		.loc 1 638 7 is_stmt 1 view .LVU287
 904              		.loc 1 638 20 is_stmt 0 view .LVU288
 905 00ce 0023     		movs	r3, #0
 906 00d0 6B62     		str	r3, [r5, #36]
 639:ARM_SEGGER_RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 31


 907              		.loc 1 639 7 is_stmt 1 view .LVU289
 908              		.loc 1 639 16 is_stmt 0 view .LVU290
 909 00d2 3F1B     		subs	r7, r7, r4
 910              	.LVL88:
 640:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 911              		.loc 1 640 7 is_stmt 1 view .LVU291
 912              		.loc 1 640 21 is_stmt 0 view .LVU292
 913 00d4 2C6A     		ldr	r4, [r5, #32]
 914              	.LVL89:
 915              		.loc 1 640 13 view .LVU293
 916 00d6 013C     		subs	r4, r4, #1
 917              	.LVL90:
 641:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 642:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } while (NumBytes);
 918              		.loc 1 642 11 is_stmt 1 view .LVU294
 919              		.loc 1 642 3 is_stmt 0 view .LVU295
 920 00d8 002F     		cmp	r7, #0
 921 00da E4D1     		bne	.L50
 922 00dc 1AE0     		b	.L40
 923              	.L53:
 924              	.LBB3:
 621:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 925              		.loc 1 621 7 is_stmt 1 view .LVU296
 622:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 926              		.loc 1 622 7 view .LVU297
 622:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 927              		.loc 1 622 19 is_stmt 0 view .LVU298
 928 00de 0E4A     		ldr	r2, .L54
 929 00e0 731C     		adds	r3, r6, #1
 930 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 931 00e6 02EBC303 		add	r3, r2, r3, lsl #3
 932 00ea 5968     		ldr	r1, [r3, #4]
 622:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 933              		.loc 1 622 36 view .LVU299
 934 00ec 06EB4603 		add	r3, r6, r6, lsl #1
 935 00f0 02EBC303 		add	r3, r2, r3, lsl #3
 936 00f4 5B6A     		ldr	r3, [r3, #36]
 622:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 937              		.loc 1 622 12 view .LVU300
 938 00f6 1944     		add	r1, r1, r3
 939              	.LVL91:
 623:ARM_SEGGER_RTT/SEGGER_RTT.c ****       do {
 940              		.loc 1 623 7 is_stmt 1 view .LVU301
 623:ARM_SEGGER_RTT/SEGGER_RTT.c ****       do {
 941              		.loc 1 623 20 is_stmt 0 view .LVU302
 942 00f8 06EB4606 		add	r6, r6, r6, lsl #1
 943              	.LVL92:
 623:ARM_SEGGER_RTT/SEGGER_RTT.c ****       do {
 944              		.loc 1 623 20 view .LVU303
 945 00fc 02EBC606 		add	r6, r2, r6, lsl #3
 946 0100 3B44     		add	r3, r3, r7
 947 0102 7362     		str	r3, [r6, #36]
 948              	.LVL93:
 949              	.L48:
 624:ARM_SEGGER_RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 950              		.loc 1 624 7 is_stmt 1 discriminator 1 view .LVU304
 625:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 32


 951              		.loc 1 625 9 discriminator 1 view .LVU305
 625:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
 952              		.loc 1 625 19 is_stmt 0 discriminator 1 view .LVU306
 953 0104 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
 954 0108 08F10108 		add	r8, r8, #1
 955              	.LVL94:
 625:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
 956              		.loc 1 625 17 discriminator 1 view .LVU307
 957 010c 0A70     		strb	r2, [r1]
 958 010e 0131     		adds	r1, r1, #1
 959              	.LVL95:
 626:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 960              		.loc 1 626 15 is_stmt 1 discriminator 1 view .LVU308
 626:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 961              		.loc 1 626 7 is_stmt 0 discriminator 1 view .LVU309
 962 0110 013F     		subs	r7, r7, #1
 963              	.LVL96:
 626:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 964              		.loc 1 626 7 discriminator 1 view .LVU310
 965 0112 F7D1     		bne	.L48
 966              	.LVL97:
 967              	.L40:
 626:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 968              		.loc 1 626 7 discriminator 1 view .LVU311
 969              	.LBE3:
 643:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 970              		.loc 1 643 1 view .LVU312
 971 0114 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 972              	.LVL98:
 973              	.L55:
 974              		.loc 1 643 1 view .LVU313
 975              		.align	2
 976              	.L54:
 977 0118 00000000 		.word	_SEGGER_RTT
 978              		.cfi_endproc
 979              	.LFE7:
 981              		.section	.text.SEGGER_RTT_WriteSkipNoLock,"ax",%progbits
 982              		.align	1
 983              		.global	SEGGER_RTT_WriteSkipNoLock
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 987              		.fpu softvfp
 989              	SEGGER_RTT_WriteSkipNoLock:
 990              	.LVL99:
 991              	.LFB8:
 644:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 645:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 646:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 647:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 648:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 649:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 650:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 651:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 652:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 653:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 654:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 33


 655:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 656:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 657:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 658:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 659:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 660:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 661:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 662:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 663:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 664:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 665:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 666:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 667:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 668:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 669:ARM_SEGGER_RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 992              		.loc 1 669 99 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              		.loc 1 669 99 is_stmt 0 view .LVU315
 997 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 998              	.LCFI8:
 999              		.cfi_def_cfa_offset 36
 1000              		.cfi_offset 4, -36
 1001              		.cfi_offset 5, -32
 1002              		.cfi_offset 6, -28
 1003              		.cfi_offset 7, -24
 1004              		.cfi_offset 8, -20
 1005              		.cfi_offset 9, -16
 1006              		.cfi_offset 10, -12
 1007              		.cfi_offset 11, -8
 1008              		.cfi_offset 14, -4
 1009 0004 83B0     		sub	sp, sp, #12
 1010              	.LCFI9:
 1011              		.cfi_def_cfa_offset 48
 1012 0006 0546     		mov	r5, r0
 1013 0008 0E46     		mov	r6, r1
 1014 000a 1446     		mov	r4, r2
 670:ARM_SEGGER_RTT/SEGGER_RTT.c ****   const char*           pData;
 1015              		.loc 1 670 3 is_stmt 1 view .LVU316
 671:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1016              		.loc 1 671 3 view .LVU317
 672:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1017              		.loc 1 672 3 view .LVU318
 673:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              RdOff;
 1018              		.loc 1 673 3 view .LVU319
 674:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1019              		.loc 1 674 3 view .LVU320
 675:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              Rem;
 1020              		.loc 1 675 3 view .LVU321
 676:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 677:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1021              		.loc 1 677 3 view .LVU322
 1022              	.LVL100:
 678:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 679:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 680:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 34


 681:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1023              		.loc 1 681 3 view .LVU323
 682:ARM_SEGGER_RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 1024              		.loc 1 682 3 view .LVU324
 1025              		.loc 1 682 9 is_stmt 0 view .LVU325
 1026 000c 00EB4003 		add	r3, r0, r0, lsl #1
 1027 0010 444A     		ldr	r2, .L69
 1028              	.LVL101:
 1029              		.loc 1 682 9 view .LVU326
 1030 0012 02EBC302 		add	r2, r2, r3, lsl #3
 1031 0016 936A     		ldr	r3, [r2, #40]
 1032              	.LVL102:
 683:ARM_SEGGER_RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1033              		.loc 1 683 3 is_stmt 1 view .LVU327
 1034              		.loc 1 683 9 is_stmt 0 view .LVU328
 1035 0018 576A     		ldr	r7, [r2, #36]
 1036              	.LVL103:
 684:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 685:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Handle the most common cases fastest.
 686:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Which is:
 687:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //    RdOff <= WrOff -> Space until wrap around is free.
 688:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //  AND
 689:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //    WrOff + NumBytes < SizeOfBuffer -> No Wrap around necessary.
 690:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 691:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //  OR
 692:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 693:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //    RdOff > WrOff -> Space until RdOff - 1 is free.
 694:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //  AND
 695:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //    WrOff + NumBytes < RdOff -> Data fits into buffer
 696:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 697:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1037              		.loc 1 697 3 is_stmt 1 view .LVU329
 1038              		.loc 1 697 6 is_stmt 0 view .LVU330
 1039 001a BB42     		cmp	r3, r7
 1040 001c 66D8     		bhi	.L57
 698:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 699:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // Get space until WrOff will be at wrap around.
 700:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 701:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 1041              		.loc 1 701 5 is_stmt 1 view .LVU331
 1042              		.loc 1 701 18 is_stmt 0 view .LVU332
 1043 001e 00EB4002 		add	r2, r0, r0, lsl #1
 1044 0022 4049     		ldr	r1, .L69
 1045              	.LVL104:
 1046              		.loc 1 701 18 view .LVU333
 1047 0024 01EBC202 		add	r2, r1, r2, lsl #3
 1048 0028 D2F82080 		ldr	r8, [r2, #32]
 1049              		.loc 1 701 38 view .LVU334
 1050 002c A8EB0709 		sub	r9, r8, r7
 1051              		.loc 1 701 11 view .LVU335
 1052 0030 09F1FF32 		add	r2, r9, #-1
 1053              	.LVL105:
 702:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1054              		.loc 1 702 5 is_stmt 1 view .LVU336
 1055              		.loc 1 702 8 is_stmt 0 view .LVU337
 1056 0034 9442     		cmp	r4, r2
 1057 0036 04D9     		bls	.L66
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 35


 703:ARM_SEGGER_RTT/SEGGER_RTT.c **** #if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts.
 704:ARM_SEGGER_RTT/SEGGER_RTT.c ****       char* pDst;
 705:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + WrOff;
 706:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff += NumBytes;
 707:ARM_SEGGER_RTT/SEGGER_RTT.c ****       do {
 708:ARM_SEGGER_RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 709:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
 710:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 711:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 712:ARM_SEGGER_RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 713:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 714:ARM_SEGGER_RTT/SEGGER_RTT.c **** #endif
 715:ARM_SEGGER_RTT/SEGGER_RTT.c ****       return 1;
 716:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 717:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 718:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // If data did not fit into space until wrap around calculate complete space in buffer.
 719:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 720:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail += RdOff;
 1058              		.loc 1 720 5 is_stmt 1 view .LVU338
 1059              		.loc 1 720 11 is_stmt 0 view .LVU339
 1060 0038 1344     		add	r3, r3, r2
 1061              	.LVL106:
 721:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 722:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // If there is still no space for the whole of this output, don't bother.
 723:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 724:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1062              		.loc 1 724 5 is_stmt 1 view .LVU340
 1063              		.loc 1 724 8 is_stmt 0 view .LVU341
 1064 003a 9C42     		cmp	r4, r3
 1065 003c 18D9     		bls	.L67
 725:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
 726:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //  OK, we have enough space in buffer. Copy in one or 2 chunks
 727:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
 728:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 729:ARM_SEGGER_RTT/SEGGER_RTT.c ****       if (Rem > NumBytes) {
 730:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 731:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 732:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 733:ARM_SEGGER_RTT/SEGGER_RTT.c ****         //
 734:ARM_SEGGER_RTT/SEGGER_RTT.c ****         // We reach the end of the buffer, so need to wrap around
 735:ARM_SEGGER_RTT/SEGGER_RTT.c ****         //
 736:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer + WrOff, pData, Rem);
 737:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 738:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 739:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 740:ARM_SEGGER_RTT/SEGGER_RTT.c ****       return 1;
 741:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 742:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 743:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 744:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 745:ARM_SEGGER_RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 746:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 747:ARM_SEGGER_RTT/SEGGER_RTT.c ****       return 1;
 748:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 749:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 750:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 751:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // If we reach this point no data has been written
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 36


 752:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 753:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return 0;
 1066              		.loc 1 753 10 view .LVU342
 1067 003e 0020     		movs	r0, #0
 1068              	.LVL107:
 1069              		.loc 1 753 10 view .LVU343
 1070 0040 59E0     		b	.L56
 1071              	.LVL108:
 1072              	.L66:
 1073              	.LBB4:
 704:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + WrOff;
 1074              		.loc 1 704 7 is_stmt 1 view .LVU344
 705:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff += NumBytes;
 1075              		.loc 1 705 7 view .LVU345
 705:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff += NumBytes;
 1076              		.loc 1 705 19 is_stmt 0 view .LVU346
 1077 0042 431C     		adds	r3, r0, #1
 1078              	.LVL109:
 705:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff += NumBytes;
 1079              		.loc 1 705 19 view .LVU347
 1080 0044 03EB4303 		add	r3, r3, r3, lsl #1
 1081 0048 01EBC303 		add	r3, r1, r3, lsl #3
 1082 004c 5868     		ldr	r0, [r3, #4]
 1083              	.LVL110:
 705:ARM_SEGGER_RTT/SEGGER_RTT.c ****       WrOff += NumBytes;
 1084              		.loc 1 705 12 view .LVU348
 1085 004e 3844     		add	r0, r0, r7
 1086              	.LVL111:
 706:ARM_SEGGER_RTT/SEGGER_RTT.c ****       do {
 1087              		.loc 1 706 7 is_stmt 1 view .LVU349
 706:ARM_SEGGER_RTT/SEGGER_RTT.c ****       do {
 1088              		.loc 1 706 13 is_stmt 0 view .LVU350
 1089 0050 2744     		add	r7, r7, r4
 1090              	.LVL112:
 1091              	.L59:
 707:ARM_SEGGER_RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 1092              		.loc 1 707 7 is_stmt 1 discriminator 1 view .LVU351
 708:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
 1093              		.loc 1 708 9 discriminator 1 view .LVU352
 708:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
 1094              		.loc 1 708 19 is_stmt 0 discriminator 1 view .LVU353
 1095 0052 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1096 0054 0136     		adds	r6, r6, #1
 1097              	.LVL113:
 708:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } while (--NumBytes);
 1098              		.loc 1 708 17 discriminator 1 view .LVU354
 1099 0056 0170     		strb	r1, [r0]
 1100 0058 0130     		adds	r0, r0, #1
 1101              	.LVL114:
 709:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1102              		.loc 1 709 15 is_stmt 1 discriminator 1 view .LVU355
 709:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1103              		.loc 1 709 7 is_stmt 0 discriminator 1 view .LVU356
 1104 005a 013C     		subs	r4, r4, #1
 1105              	.LVL115:
 709:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1106              		.loc 1 709 7 discriminator 1 view .LVU357
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 37


 1107 005c F9D1     		bne	.L59
 710:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 1108              		.loc 1 710 7 is_stmt 1 view .LVU358
 710:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 1109              		.loc 1 710 28 is_stmt 0 view .LVU359
 1110 005e 3C44     		add	r4, r4, r7
 1111              	.LVL116:
 710:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 1112              		.loc 1 710 20 view .LVU360
 1113 0060 05EB4505 		add	r5, r5, r5, lsl #1
 1114              	.LVL117:
 710:ARM_SEGGER_RTT/SEGGER_RTT.c **** #else
 1115              		.loc 1 710 20 view .LVU361
 1116 0064 2F4B     		ldr	r3, .L69
 1117 0066 03EBC505 		add	r5, r3, r5, lsl #3
 1118 006a 6C62     		str	r4, [r5, #36]
 715:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1119              		.loc 1 715 7 is_stmt 1 view .LVU362
 715:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1120              		.loc 1 715 14 is_stmt 0 view .LVU363
 1121 006c 0120     		movs	r0, #1
 1122              	.LVL118:
 715:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1123              		.loc 1 715 14 view .LVU364
 1124 006e 42E0     		b	.L56
 1125              	.LVL119:
 1126              	.L67:
 715:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1127              		.loc 1 715 14 view .LVU365
 1128              	.LBE4:
 728:ARM_SEGGER_RTT/SEGGER_RTT.c ****       if (Rem > NumBytes) {
 1129              		.loc 1 728 7 is_stmt 1 view .LVU366
 729:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 1130              		.loc 1 729 7 view .LVU367
 729:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 1131              		.loc 1 729 10 is_stmt 0 view .LVU368
 1132 0070 A145     		cmp	r9, r4
 1133 0072 15D9     		bls	.L61
 730:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1134              		.loc 1 730 9 is_stmt 1 view .LVU369
 730:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1135              		.loc 1 730 21 is_stmt 0 view .LVU370
 1136 0074 DFF8AC80 		ldr	r8, .L69
 1137 0078 431C     		adds	r3, r0, #1
 1138              	.LVL120:
 730:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1139              		.loc 1 730 21 view .LVU371
 1140 007a 03EB4303 		add	r3, r3, r3, lsl #1
 1141 007e 08EBC303 		add	r3, r8, r3, lsl #3
 1142 0082 5868     		ldr	r0, [r3, #4]
 1143              	.LVL121:
 730:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1144              		.loc 1 730 9 view .LVU372
 1145 0084 2246     		mov	r2, r4
 1146 0086 3146     		mov	r1, r6
 1147 0088 3844     		add	r0, r0, r7
 1148 008a FFF7FEFF 		bl	memcpy
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 38


 1149              	.LVL122:
 731:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 1150              		.loc 1 731 9 is_stmt 1 view .LVU373
 731:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 1151              		.loc 1 731 30 is_stmt 0 view .LVU374
 1152 008e 3C44     		add	r4, r4, r7
 1153              	.LVL123:
 731:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 1154              		.loc 1 731 22 view .LVU375
 1155 0090 05EB4505 		add	r5, r5, r5, lsl #1
 1156              	.LVL124:
 731:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 1157              		.loc 1 731 22 view .LVU376
 1158 0094 08EBC508 		add	r8, r8, r5, lsl #3
 1159 0098 C8F82440 		str	r4, [r8, #36]
 1160              	.LVL125:
 1161              	.L62:
 740:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1162              		.loc 1 740 7 is_stmt 1 view .LVU377
 740:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1163              		.loc 1 740 14 is_stmt 0 view .LVU378
 1164 009c 0120     		movs	r0, #1
 1165 009e 2AE0     		b	.L56
 1166              	.LVL126:
 1167              	.L61:
 736:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1168              		.loc 1 736 9 is_stmt 1 view .LVU379
 736:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1169              		.loc 1 736 21 is_stmt 0 view .LVU380
 1170 00a0 DFF880A0 		ldr	r10, .L69
 1171 00a4 00F1010B 		add	fp, r0, #1
 1172 00a8 4FEA4B03 		lsl	r3, fp, #1
 1173              	.LVL127:
 736:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1174              		.loc 1 736 21 view .LVU381
 1175 00ac 0193     		str	r3, [sp, #4]
 1176 00ae 0BEB4B03 		add	r3, fp, fp, lsl #1
 1177 00b2 0AEBC303 		add	r3, r10, r3, lsl #3
 1178 00b6 5868     		ldr	r0, [r3, #4]
 1179              	.LVL128:
 736:ARM_SEGGER_RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1180              		.loc 1 736 9 view .LVU382
 1181 00b8 4A46     		mov	r2, r9
 1182 00ba 3146     		mov	r1, r6
 1183 00bc 3844     		add	r0, r0, r7
 1184 00be FFF7FEFF 		bl	memcpy
 1185              	.LVL129:
 737:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1186              		.loc 1 737 9 is_stmt 1 view .LVU383
 737:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1187              		.loc 1 737 21 is_stmt 0 view .LVU384
 1188 00c2 019B     		ldr	r3, [sp, #4]
 1189 00c4 9B44     		add	fp, fp, r3
 1190 00c6 0AEBCB0B 		add	fp, r10, fp, lsl #3
 737:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1191              		.loc 1 737 9 view .LVU385
 1192 00ca A7EB0807 		sub	r7, r7, r8
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 39


 1193              	.LVL130:
 737:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1194              		.loc 1 737 9 view .LVU386
 1195 00ce 3C44     		add	r4, r4, r7
 1196              	.LVL131:
 737:ARM_SEGGER_RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1197              		.loc 1 737 9 view .LVU387
 1198 00d0 2246     		mov	r2, r4
 1199 00d2 06EB0901 		add	r1, r6, r9
 1200 00d6 DBF80400 		ldr	r0, [fp, #4]
 1201 00da FFF7FEFF 		bl	memcpy
 1202              	.LVL132:
 738:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 1203              		.loc 1 738 9 is_stmt 1 view .LVU388
 738:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 1204              		.loc 1 738 22 is_stmt 0 view .LVU389
 1205 00de 05EB4505 		add	r5, r5, r5, lsl #1
 1206              	.LVL133:
 738:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 1207              		.loc 1 738 22 view .LVU390
 1208 00e2 0AEBC50A 		add	r10, r10, r5, lsl #3
 1209 00e6 CAF82440 		str	r4, [r10, #36]
 1210 00ea D7E7     		b	.L62
 1211              	.LVL134:
 1212              	.L57:
 743:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1213              		.loc 1 743 5 is_stmt 1 view .LVU391
 743:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1214              		.loc 1 743 19 is_stmt 0 view .LVU392
 1215 00ec DB1B     		subs	r3, r3, r7
 1216              	.LVL135:
 743:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1217              		.loc 1 743 11 view .LVU393
 1218 00ee 013B     		subs	r3, r3, #1
 1219              	.LVL136:
 744:ARM_SEGGER_RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 1220              		.loc 1 744 5 is_stmt 1 view .LVU394
 744:ARM_SEGGER_RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 1221              		.loc 1 744 8 is_stmt 0 view .LVU395
 1222 00f0 A342     		cmp	r3, r4
 1223 00f2 03D2     		bcs	.L68
 1224              		.loc 1 753 10 view .LVU396
 1225 00f4 0020     		movs	r0, #0
 1226              	.LVL137:
 1227              	.L56:
 754:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1228              		.loc 1 754 1 view .LVU397
 1229 00f6 03B0     		add	sp, sp, #12
 1230              	.LCFI10:
 1231              		.cfi_remember_state
 1232              		.cfi_def_cfa_offset 36
 1233              		@ sp needed
 1234 00f8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1235              	.LVL138:
 1236              	.L68:
 1237              	.LCFI11:
 1238              		.cfi_restore_state
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 40


 745:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1239              		.loc 1 745 7 is_stmt 1 view .LVU398
 745:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1240              		.loc 1 745 19 is_stmt 0 view .LVU399
 1241 00fc DFF82480 		ldr	r8, .L69
 1242 0100 431C     		adds	r3, r0, #1
 1243              	.LVL139:
 745:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1244              		.loc 1 745 19 view .LVU400
 1245 0102 03EB4303 		add	r3, r3, r3, lsl #1
 1246 0106 08EBC303 		add	r3, r8, r3, lsl #3
 1247 010a 5868     		ldr	r0, [r3, #4]
 1248              	.LVL140:
 745:ARM_SEGGER_RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1249              		.loc 1 745 7 view .LVU401
 1250 010c 2246     		mov	r2, r4
 1251 010e 3844     		add	r0, r0, r7
 1252 0110 FFF7FEFF 		bl	memcpy
 1253              	.LVL141:
 746:ARM_SEGGER_RTT/SEGGER_RTT.c ****       return 1;
 1254              		.loc 1 746 7 is_stmt 1 view .LVU402
 746:ARM_SEGGER_RTT/SEGGER_RTT.c ****       return 1;
 1255              		.loc 1 746 28 is_stmt 0 view .LVU403
 1256 0114 3C44     		add	r4, r4, r7
 1257              	.LVL142:
 746:ARM_SEGGER_RTT/SEGGER_RTT.c ****       return 1;
 1258              		.loc 1 746 20 view .LVU404
 1259 0116 05EB4505 		add	r5, r5, r5, lsl #1
 1260              	.LVL143:
 746:ARM_SEGGER_RTT/SEGGER_RTT.c ****       return 1;
 1261              		.loc 1 746 20 view .LVU405
 1262 011a 08EBC505 		add	r5, r8, r5, lsl #3
 1263 011e 6C62     		str	r4, [r5, #36]
 747:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1264              		.loc 1 747 7 is_stmt 1 view .LVU406
 747:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1265              		.loc 1 747 14 is_stmt 0 view .LVU407
 1266 0120 0120     		movs	r0, #1
 1267 0122 E8E7     		b	.L56
 1268              	.L70:
 1269              		.align	2
 1270              	.L69:
 1271 0124 00000000 		.word	_SEGGER_RTT
 1272              		.cfi_endproc
 1273              	.LFE8:
 1275              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1276              		.align	1
 1277              		.global	SEGGER_RTT_WriteNoLock
 1278              		.syntax unified
 1279              		.thumb
 1280              		.thumb_func
 1281              		.fpu softvfp
 1283              	SEGGER_RTT_WriteNoLock:
 1284              	.LVL144:
 1285              	.LFB9:
 755:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 756:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 41


 757:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 758:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
 759:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 760:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 761:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 762:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 763:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
 764:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 765:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 766:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 767:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 768:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 769:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 770:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 771:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 772:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 773:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 774:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropp
 775:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 776:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 777:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 778:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 779:ARM_SEGGER_RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1286              		.loc 1 779 95 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		.loc 1 779 95 is_stmt 0 view .LVU409
 1291 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1292              	.LCFI12:
 1293              		.cfi_def_cfa_offset 24
 1294              		.cfi_offset 3, -24
 1295              		.cfi_offset 4, -20
 1296              		.cfi_offset 5, -16
 1297              		.cfi_offset 6, -12
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 0F46     		mov	r7, r1
 1301 0004 1646     		mov	r6, r2
 780:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              Status;
 1302              		.loc 1 780 3 is_stmt 1 view .LVU410
 781:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1303              		.loc 1 781 3 view .LVU411
 782:ARM_SEGGER_RTT/SEGGER_RTT.c ****   const char*           pData;
 1304              		.loc 1 782 3 view .LVU412
 783:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1305              		.loc 1 783 3 view .LVU413
 784:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 785:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1306              		.loc 1 785 3 view .LVU414
 1307              	.LVL145:
 786:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 787:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
 788:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 789:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1308              		.loc 1 789 3 view .LVU415
 1309              		.loc 1 789 9 is_stmt 0 view .LVU416
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 42


 1310 0006 451C     		adds	r5, r0, #1
 1311 0008 05EB4505 		add	r5, r5, r5, lsl #1
 1312 000c 164B     		ldr	r3, .L78
 1313 000e 03EBC505 		add	r5, r3, r5, lsl #3
 1314              	.LVL146:
 790:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 791:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
 792:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 793:ARM_SEGGER_RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1315              		.loc 1 793 3 is_stmt 1 view .LVU417
 1316              		.loc 1 793 16 is_stmt 0 view .LVU418
 1317 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1318              	.LVL147:
 1319              		.loc 1 793 16 view .LVU419
 1320 0016 03EBC000 		add	r0, r3, r0, lsl #3
 1321 001a C46A     		ldr	r4, [r0, #44]
 1322              		.loc 1 793 3 view .LVU420
 1323 001c 012C     		cmp	r4, #1
 1324 001e 11D0     		beq	.L72
 1325 0020 022C     		cmp	r4, #2
 1326 0022 1CD0     		beq	.L73
 1327 0024 14B1     		cbz	r4, .L77
 1328 0026 0024     		movs	r4, #0
 1329              	.LVL148:
 794:ARM_SEGGER_RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 795:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 796:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
 797:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // of this output, don't bother.
 798:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 799:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 800:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 801:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = 0u;
 802:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {
 803:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = NumBytes;
 804:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 805:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 806:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 807:ARM_SEGGER_RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
 808:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 809:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
 810:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 811:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 812:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 813:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 814:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 815:ARM_SEGGER_RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 816:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 817:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
 818:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
 819:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 820:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 821:ARM_SEGGER_RTT/SEGGER_RTT.c ****   default:
 822:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Status = 0u;
 823:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 824:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 825:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 826:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Finish up.
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 43


 827:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 828:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return Status;
 1330              		.loc 1 828 3 is_stmt 1 view .LVU421
 1331              	.L71:
 829:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1332              		.loc 1 829 1 is_stmt 0 view .LVU422
 1333 0028 2046     		mov	r0, r4
 1334 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1335              	.LVL149:
 1336              	.L77:
 799:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1337              		.loc 1 799 5 is_stmt 1 view .LVU423
 799:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1338              		.loc 1 799 13 is_stmt 0 view .LVU424
 1339 002c 2846     		mov	r0, r5
 1340 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1341              	.LVL150:
 800:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = 0u;
 1342              		.loc 1 800 5 is_stmt 1 view .LVU425
 800:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = 0u;
 1343              		.loc 1 800 8 is_stmt 0 view .LVU426
 1344 0032 8642     		cmp	r6, r0
 1345 0034 F8D8     		bhi	.L71
 803:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1346              		.loc 1 803 7 is_stmt 1 view .LVU427
 1347              	.LVL151:
 804:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1348              		.loc 1 804 7 view .LVU428
 1349 0036 3246     		mov	r2, r6
 1350 0038 3946     		mov	r1, r7
 1351 003a 2846     		mov	r0, r5
 1352              	.LVL152:
 804:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
 1353              		.loc 1 804 7 is_stmt 0 view .LVU429
 1354 003c FFF7FEFF 		bl	_WriteNoCheck
 1355              	.LVL153:
 803:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1356              		.loc 1 803 14 view .LVU430
 1357 0040 3446     		mov	r4, r6
 1358 0042 F1E7     		b	.L71
 1359              	.LVL154:
 1360              	.L72:
 811:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1361              		.loc 1 811 5 is_stmt 1 view .LVU431
 811:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1362              		.loc 1 811 13 is_stmt 0 view .LVU432
 1363 0044 2846     		mov	r0, r5
 1364 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1365              	.LVL155:
 812:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1366              		.loc 1 812 5 is_stmt 1 view .LVU433
 812:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1367              		.loc 1 812 12 is_stmt 0 view .LVU434
 1368 004a 3446     		mov	r4, r6
 1369 004c 8642     		cmp	r6, r0
 1370 004e 28BF     		it	cs
 1371 0050 0446     		movcs	r4, r0
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 44


 1372              	.LVL156:
 813:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 1373              		.loc 1 813 5 is_stmt 1 view .LVU435
 1374 0052 2246     		mov	r2, r4
 1375 0054 3946     		mov	r1, r7
 1376 0056 2846     		mov	r0, r5
 1377              	.LVL157:
 813:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 1378              		.loc 1 813 5 is_stmt 0 view .LVU436
 1379 0058 FFF7FEFF 		bl	_WriteNoCheck
 1380              	.LVL158:
 814:ARM_SEGGER_RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1381              		.loc 1 814 5 is_stmt 1 view .LVU437
 1382 005c E4E7     		b	.L71
 1383              	.LVL159:
 1384              	.L73:
 819:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 1385              		.loc 1 819 5 view .LVU438
 819:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 1386              		.loc 1 819 14 is_stmt 0 view .LVU439
 1387 005e 2846     		mov	r0, r5
 1388 0060 FFF7FEFF 		bl	_WriteBlocking
 1389              	.LVL160:
 819:ARM_SEGGER_RTT/SEGGER_RTT.c ****     break;
 1390              		.loc 1 819 14 view .LVU440
 1391 0064 0446     		mov	r4, r0
 1392              	.LVL161:
 820:ARM_SEGGER_RTT/SEGGER_RTT.c ****   default:
 1393              		.loc 1 820 5 is_stmt 1 view .LVU441
 1394 0066 DFE7     		b	.L71
 1395              	.L79:
 1396              		.align	2
 1397              	.L78:
 1398 0068 00000000 		.word	_SEGGER_RTT
 1399              		.cfi_endproc
 1400              	.LFE9:
 1402              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1403              		.align	1
 1404              		.global	SEGGER_RTT_Write
 1405              		.syntax unified
 1406              		.thumb
 1407              		.thumb_func
 1408              		.fpu softvfp
 1410              	SEGGER_RTT_Write:
 1411              	.LVL162:
 1412              	.LFB10:
 830:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 831:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 832:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 833:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Write
 834:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 835:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 836:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 837:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 838:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 839:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 840:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 45


 841:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 842:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 843:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 844:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 845:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 846:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 847:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 848:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropp
 849:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 850:ARM_SEGGER_RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1413              		.loc 1 850 89 view -0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 0
 1416              		@ frame_needed = 0, uses_anonymous_args = 0
 1417              		.loc 1 850 89 is_stmt 0 view .LVU443
 1418 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1419              	.LCFI13:
 1420              		.cfi_def_cfa_offset 24
 1421              		.cfi_offset 3, -24
 1422              		.cfi_offset 4, -20
 1423              		.cfi_offset 5, -16
 1424              		.cfi_offset 6, -12
 1425              		.cfi_offset 7, -8
 1426              		.cfi_offset 14, -4
 1427 0002 0446     		mov	r4, r0
 1428 0004 0D46     		mov	r5, r1
 1429 0006 1646     		mov	r6, r2
 851:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned Status;
 1430              		.loc 1 851 3 is_stmt 1 view .LVU444
 852:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 853:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 1431              		.loc 1 853 3 view .LVU445
 1432              		.loc 1 853 3 view .LVU446
 1433 0008 094B     		ldr	r3, .L84
 1434 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1435 000c 6BB1     		cbz	r3, .L83
 1436              	.LVL163:
 1437              	.L81:
 1438              		.loc 1 853 3 discriminator 3 view .LVU447
 1439              	.LBB5:
 854:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1440              		.loc 1 854 3 discriminator 3 view .LVU448
 1441              		.loc 1 854 3 discriminator 3 view .LVU449
 1442              		.syntax unified
 1443              	@ 854 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 1444 000e EFF31187 		mrs   r7, basepri  
 1445 0012 4FF02001 		mov   r1, #32       
 1446 0016 81F31188 		msr   basepri, r1  
 1447              		
 1448              	@ 0 "" 2
 1449              	.LVL164:
 1450              		.loc 1 854 20 discriminator 3 view .LVU450
 855:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 856:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Call the non-locking write function
 857:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 858:ARM_SEGGER_RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 1451              		.loc 1 858 3 discriminator 3 view .LVU451
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 46


 1452              		.loc 1 858 12 is_stmt 0 discriminator 3 view .LVU452
 1453              		.thumb
 1454              		.syntax unified
 1455 001a 3246     		mov	r2, r6
 1456 001c 2946     		mov	r1, r5
 1457 001e 2046     		mov	r0, r4
 1458 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1459              	.LVL165:
 859:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 860:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Finish up.
 861:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 862:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1460              		.loc 1 862 3 is_stmt 1 discriminator 3 view .LVU453
 1461              		.syntax unified
 1462              	@ 862 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 1463 0024 87F31188 		msr   basepri, r7  
 1464              		
 1465              	@ 0 "" 2
 1466              		.thumb
 1467              		.syntax unified
 1468              	.LBE5:
 1469              		.loc 1 862 22 discriminator 3 view .LVU454
 863:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 864:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return Status;
 1470              		.loc 1 864 3 discriminator 3 view .LVU455
 865:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1471              		.loc 1 865 1 is_stmt 0 discriminator 3 view .LVU456
 1472 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1473              	.LVL166:
 1474              	.L83:
 853:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1475              		.loc 1 853 3 is_stmt 1 discriminator 1 view .LVU457
 1476 002a FFF7FEFF 		bl	_DoInit
 1477              	.LVL167:
 853:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1478              		.loc 1 853 3 is_stmt 0 discriminator 1 view .LVU458
 1479 002e EEE7     		b	.L81
 1480              	.L85:
 1481              		.align	2
 1482              	.L84:
 1483 0030 00000000 		.word	_SEGGER_RTT
 1484              		.cfi_endproc
 1485              	.LFE10:
 1487              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1488              		.align	1
 1489              		.global	SEGGER_RTT_WriteString
 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
 1493              		.fpu softvfp
 1495              	SEGGER_RTT_WriteString:
 1496              	.LVL168:
 1497              	.LFB11:
 866:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 867:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 868:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 869:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 47


 870:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 871:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 872:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
 873:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    This data is read by the host.
 874:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 875:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
 876:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 877:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    s            Pointer to string.
 878:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 879:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 880:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 881:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 882:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 883:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, depending on configuration,
 884:ARM_SEGGER_RTT/SEGGER_RTT.c **** *        remaining characters may be dropped or RTT module waits until there is more space in the b
 885:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
 886:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
 887:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 888:ARM_SEGGER_RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1498              		.loc 1 888 70 is_stmt 1 view -0
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 0
 1501              		@ frame_needed = 0, uses_anonymous_args = 0
 1502              		.loc 1 888 70 is_stmt 0 view .LVU460
 1503 0000 38B5     		push	{r3, r4, r5, lr}
 1504              	.LCFI14:
 1505              		.cfi_def_cfa_offset 16
 1506              		.cfi_offset 3, -16
 1507              		.cfi_offset 4, -12
 1508              		.cfi_offset 5, -8
 1509              		.cfi_offset 14, -4
 1510 0002 0546     		mov	r5, r0
 1511 0004 0C46     		mov	r4, r1
 889:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned Len;
 1512              		.loc 1 889 3 is_stmt 1 view .LVU461
 890:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 891:ARM_SEGGER_RTT/SEGGER_RTT.c ****   Len = STRLEN(s);
 1513              		.loc 1 891 3 view .LVU462
 1514              		.loc 1 891 9 is_stmt 0 view .LVU463
 1515 0006 0846     		mov	r0, r1
 1516              	.LVL169:
 1517              		.loc 1 891 9 view .LVU464
 1518 0008 FFF7FEFF 		bl	strlen
 1519              	.LVL170:
 1520              		.loc 1 891 9 view .LVU465
 1521 000c 0246     		mov	r2, r0
 1522              	.LVL171:
 892:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1523              		.loc 1 892 3 is_stmt 1 view .LVU466
 1524              		.loc 1 892 10 is_stmt 0 view .LVU467
 1525 000e 2146     		mov	r1, r4
 1526 0010 2846     		mov	r0, r5
 1527              	.LVL172:
 1528              		.loc 1 892 10 view .LVU468
 1529 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1530              	.LVL173:
 893:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 48


 1531              		.loc 1 893 1 view .LVU469
 1532 0016 38BD     		pop	{r3, r4, r5, pc}
 1533              		.loc 1 893 1 view .LVU470
 1534              		.cfi_endproc
 1535              	.LFE11:
 1537              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 1538              		.align	1
 1539              		.global	SEGGER_RTT_GetKey
 1540              		.syntax unified
 1541              		.thumb
 1542              		.thumb_func
 1543              		.fpu softvfp
 1545              	SEGGER_RTT_GetKey:
 1546              	.LFB12:
 894:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 895:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 896:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 897:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
 898:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 899:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 900:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
 901:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Host has previously stored data there.
 902:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 903:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 904:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
 905:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
 906:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 907:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 908:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
 909:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 910:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 1547              		.loc 1 910 29 is_stmt 1 view -0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 8
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551 0000 00B5     		push	{lr}
 1552              	.LCFI15:
 1553              		.cfi_def_cfa_offset 4
 1554              		.cfi_offset 14, -4
 1555 0002 83B0     		sub	sp, sp, #12
 1556              	.LCFI16:
 1557              		.cfi_def_cfa_offset 16
 911:ARM_SEGGER_RTT/SEGGER_RTT.c ****   char c;
 1558              		.loc 1 911 3 view .LVU472
 912:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 1559              		.loc 1 912 3 view .LVU473
 913:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 914:ARM_SEGGER_RTT/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 1560              		.loc 1 914 3 view .LVU474
 1561              		.loc 1 914 12 is_stmt 0 view .LVU475
 1562 0004 0122     		movs	r2, #1
 1563 0006 0DF10701 		add	r1, sp, #7
 1564 000a 0020     		movs	r0, #0
 1565 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 1566              	.LVL174:
 915:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (r == 1) {
 1567              		.loc 1 915 3 is_stmt 1 view .LVU476
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 49


 1568              		.loc 1 915 6 is_stmt 0 view .LVU477
 1569 0010 0128     		cmp	r0, #1
 1570 0012 04D1     		bne	.L90
 916:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 1571              		.loc 1 916 5 is_stmt 1 view .LVU478
 1572              		.loc 1 916 9 is_stmt 0 view .LVU479
 1573 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1574              	.LVL175:
 1575              	.L88:
 917:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 918:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
 919:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 920:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
 921:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1576              		.loc 1 921 1 view .LVU480
 1577 0018 03B0     		add	sp, sp, #12
 1578              	.LCFI17:
 1579              		.cfi_remember_state
 1580              		.cfi_def_cfa_offset 4
 1581              		@ sp needed
 1582 001a 5DF804FB 		ldr	pc, [sp], #4
 1583              	.LVL176:
 1584              	.L90:
 1585              	.LCFI18:
 1586              		.cfi_restore_state
 918:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 1587              		.loc 1 918 7 view .LVU481
 1588 001e 4FF0FF30 		mov	r0, #-1
 1589              	.LVL177:
 920:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1590              		.loc 1 920 3 is_stmt 1 view .LVU482
 920:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1591              		.loc 1 920 10 is_stmt 0 view .LVU483
 1592 0022 F9E7     		b	.L88
 1593              		.cfi_endproc
 1594              	.LFE12:
 1596              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 1597              		.align	1
 1598              		.global	SEGGER_RTT_WaitKey
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu softvfp
 1604              	SEGGER_RTT_WaitKey:
 1605              	.LFB13:
 922:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 923:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 924:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 925:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
 926:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 927:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 928:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
 929:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
 930:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 931:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 932:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
 933:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 50


 934:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 935:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
 936:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
 937:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 938:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 1606              		.loc 1 938 30 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610 0000 08B5     		push	{r3, lr}
 1611              	.LCFI19:
 1612              		.cfi_def_cfa_offset 8
 1613              		.cfi_offset 3, -8
 1614              		.cfi_offset 14, -4
 1615              	.L93:
 939:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 1616              		.loc 1 939 3 discriminator 1 view .LVU485
 940:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 941:ARM_SEGGER_RTT/SEGGER_RTT.c ****   do {
 1617              		.loc 1 941 3 discriminator 1 view .LVU486
 942:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 1618              		.loc 1 942 5 discriminator 1 view .LVU487
 1619              		.loc 1 942 9 is_stmt 0 discriminator 1 view .LVU488
 1620 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 1621              	.LVL178:
 943:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } while (r < 0);
 1622              		.loc 1 943 11 is_stmt 1 discriminator 1 view .LVU489
 1623              		.loc 1 943 3 is_stmt 0 discriminator 1 view .LVU490
 1624 0006 0028     		cmp	r0, #0
 1625              		.loc 1 943 3 discriminator 1 view .LVU491
 1626 0008 FBDB     		blt	.L93
 944:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
 945:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1627              		.loc 1 945 1 view .LVU492
 1628 000a 08BD     		pop	{r3, pc}
 1629              		.cfi_endproc
 1630              	.LFE13:
 1632              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 1633              		.align	1
 1634              		.global	SEGGER_RTT_HasKey
 1635              		.syntax unified
 1636              		.thumb
 1637              		.thumb_func
 1638              		.fpu softvfp
 1640              	SEGGER_RTT_HasKey:
 1641              	.LFB14:
 946:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 947:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 948:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 949:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
 950:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 951:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 952:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
 953:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 954:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
 955:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
 956:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 51


 957:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 958:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Notes
 959:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
 960:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 961:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 1642              		.loc 1 961 29 is_stmt 1 view -0
 1643              		.cfi_startproc
 1644              		@ args = 0, pretend = 0, frame = 0
 1645              		@ frame_needed = 0, uses_anonymous_args = 0
 1646 0000 08B5     		push	{r3, lr}
 1647              	.LCFI20:
 1648              		.cfi_def_cfa_offset 8
 1649              		.cfi_offset 3, -8
 1650              		.cfi_offset 14, -4
 962:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned RdOff;
 1651              		.loc 1 962 3 view .LVU494
 963:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 1652              		.loc 1 963 3 view .LVU495
 964:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 965:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 1653              		.loc 1 965 3 view .LVU496
 1654              		.loc 1 965 3 view .LVU497
 1655 0002 074B     		ldr	r3, .L101
 1656 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1657 0006 33B1     		cbz	r3, .L100
 1658              	.L96:
 1659              		.loc 1 965 3 discriminator 3 view .LVU498
 966:ARM_SEGGER_RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 1660              		.loc 1 966 3 discriminator 3 view .LVU499
 1661              		.loc 1 966 9 is_stmt 0 discriminator 3 view .LVU500
 1662 0008 054B     		ldr	r3, .L101
 1663 000a 1A6F     		ldr	r2, [r3, #112]
 1664              	.LVL179:
 967:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
 1665              		.loc 1 967 3 is_stmt 1 discriminator 3 view .LVU501
 1666              		.loc 1 967 36 is_stmt 0 discriminator 3 view .LVU502
 1667 000c DB6E     		ldr	r3, [r3, #108]
 1668              		.loc 1 967 6 discriminator 3 view .LVU503
 1669 000e 9342     		cmp	r3, r2
 1670 0010 04D0     		beq	.L98
 968:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = 1;
 1671              		.loc 1 968 7 view .LVU504
 1672 0012 0120     		movs	r0, #1
 1673              	.L95:
 969:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
 970:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = 0;
 971:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 972:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
 973:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1674              		.loc 1 973 1 view .LVU505
 1675 0014 08BD     		pop	{r3, pc}
 1676              	.LVL180:
 1677              	.L100:
 965:ARM_SEGGER_RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 1678              		.loc 1 965 3 is_stmt 1 discriminator 1 view .LVU506
 1679 0016 FFF7FEFF 		bl	_DoInit
 1680              	.LVL181:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 52


 1681 001a F5E7     		b	.L96
 1682              	.LVL182:
 1683              	.L98:
 970:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 1684              		.loc 1 970 7 is_stmt 0 view .LVU507
 1685 001c 0020     		movs	r0, #0
 1686              	.LVL183:
 972:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1687              		.loc 1 972 3 is_stmt 1 view .LVU508
 972:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1688              		.loc 1 972 10 is_stmt 0 view .LVU509
 1689 001e F9E7     		b	.L95
 1690              	.L102:
 1691              		.align	2
 1692              	.L101:
 1693 0020 00000000 		.word	_SEGGER_RTT
 1694              		.cfi_endproc
 1695              	.LFE14:
 1697              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 1698              		.align	1
 1699              		.global	SEGGER_RTT_HasData
 1700              		.syntax unified
 1701              		.thumb
 1702              		.thumb_func
 1703              		.fpu softvfp
 1705              	SEGGER_RTT_HasData:
 1706              	.LVL184:
 1707              	.LFB15:
 974:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 975:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 976:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 977:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
 978:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 979:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
 980:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
 981:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 982:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value:
 983:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  ==0:  No data
 984:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
 985:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 986:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
 987:ARM_SEGGER_RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 1708              		.loc 1 987 51 is_stmt 1 view -0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 1712              		@ link register save eliminated.
 988:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 1713              		.loc 1 988 3 view .LVU511
 989:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned                v;
 1714              		.loc 1 989 3 view .LVU512
 990:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 991:ARM_SEGGER_RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 1715              		.loc 1 991 3 view .LVU513
 992:ARM_SEGGER_RTT/SEGGER_RTT.c ****   v = pRing->WrOff;
 1716              		.loc 1 992 3 view .LVU514
 1717              		.loc 1 992 5 is_stmt 0 view .LVU515
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 53


 1718 0000 064B     		ldr	r3, .L104
 1719 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1720 0006 03EBC202 		add	r2, r3, r2, lsl #3
 1721 000a D26E     		ldr	r2, [r2, #108]
 1722              	.LVL185:
 993:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return v - pRing->RdOff;
 1723              		.loc 1 993 3 is_stmt 1 view .LVU516
 1724              		.loc 1 993 19 is_stmt 0 view .LVU517
 1725 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1726              	.LVL186:
 1727              		.loc 1 993 19 view .LVU518
 1728 0010 03EBC000 		add	r0, r3, r0, lsl #3
 1729 0014 006F     		ldr	r0, [r0, #112]
 994:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1730              		.loc 1 994 1 view .LVU519
 1731 0016 101A     		subs	r0, r2, r0
 1732 0018 7047     		bx	lr
 1733              	.L105:
 1734 001a 00BF     		.align	2
 1735              	.L104:
 1736 001c 00000000 		.word	_SEGGER_RTT
 1737              		.cfi_endproc
 1738              	.LFE15:
 1740              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 1741              		.align	1
 1742              		.global	SEGGER_RTT_AllocDownBuffer
 1743              		.syntax unified
 1744              		.thumb
 1745              		.thumb_func
 1746              		.fpu softvfp
 1748              	SEGGER_RTT_AllocDownBuffer:
 1749              	.LVL187:
 1750              	.LFB16:
 995:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
 996:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
 997:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
 998:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
 999:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1000:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1001:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1002:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1003:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1004:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1005:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1006:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1007:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1008:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1009:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1010:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1011:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1012:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1013:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0 - Error
1014:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1015:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 1751              		.loc 1 1015 103 is_stmt 1 view -0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 54


 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755              		.loc 1 1015 103 is_stmt 0 view .LVU521
 1756 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1757              	.LCFI21:
 1758              		.cfi_def_cfa_offset 32
 1759              		.cfi_offset 3, -32
 1760              		.cfi_offset 4, -28
 1761              		.cfi_offset 5, -24
 1762              		.cfi_offset 6, -20
 1763              		.cfi_offset 7, -16
 1764              		.cfi_offset 8, -12
 1765              		.cfi_offset 9, -8
 1766              		.cfi_offset 14, -4
 1767 0004 8146     		mov	r9, r0
 1768 0006 8846     		mov	r8, r1
 1769 0008 1746     		mov	r7, r2
 1770 000a 1E46     		mov	r6, r3
1016:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int BufferIndex;
 1771              		.loc 1 1016 3 is_stmt 1 view .LVU522
1017:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1018:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 1772              		.loc 1 1018 3 view .LVU523
 1773              		.loc 1 1018 3 view .LVU524
 1774 000c 184B     		ldr	r3, .L114
 1775              	.LVL188:
 1776              		.loc 1 1018 3 is_stmt 0 view .LVU525
 1777 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1778 0010 3BB3     		cbz	r3, .L113
 1779              	.LVL189:
 1780              	.L107:
 1781              		.loc 1 1018 3 is_stmt 1 discriminator 3 view .LVU526
 1782              	.LBB6:
1019:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1783              		.loc 1 1019 3 discriminator 3 view .LVU527
 1784              		.loc 1 1019 3 discriminator 3 view .LVU528
 1785              		.syntax unified
 1786              	@ 1019 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 1787 0012 EFF31182 		mrs   r2, basepri  
 1788 0016 4FF02001 		mov   r1, #32       
 1789 001a 81F31188 		msr   basepri, r1  
 1790              		
 1791              	@ 0 "" 2
 1792              	.LVL190:
 1793              		.loc 1 1019 20 discriminator 3 view .LVU529
1020:ARM_SEGGER_RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 1794              		.loc 1 1020 3 discriminator 3 view .LVU530
 1795              		.loc 1 1020 15 is_stmt 0 discriminator 3 view .LVU531
 1796              		.thumb
 1797              		.syntax unified
 1798 001e 0020     		movs	r0, #0
 1799              	.LVL191:
 1800              	.L109:
1021:ARM_SEGGER_RTT/SEGGER_RTT.c ****   do {
 1801              		.loc 1 1021 3 is_stmt 1 view .LVU532
1022:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
 1802              		.loc 1 1022 5 view .LVU533
 1803              		.loc 1 1022 39 is_stmt 0 view .LVU534
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 55


 1804 0020 00EB4004 		add	r4, r0, r0, lsl #1
 1805 0024 124D     		ldr	r5, .L114
 1806 0026 05EBC404 		add	r4, r5, r4, lsl #3
 1807 002a 636E     		ldr	r3, [r4, #100]
 1808              		.loc 1 1022 8 view .LVU535
 1809 002c 1BB1     		cbz	r3, .L108
1023:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
1024:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
1025:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferIndex++;
 1810              		.loc 1 1025 5 is_stmt 1 view .LVU536
 1811              		.loc 1 1025 16 is_stmt 0 view .LVU537
 1812 002e 0130     		adds	r0, r0, #1
 1813              	.LVL192:
1026:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
 1814              		.loc 1 1026 11 is_stmt 1 view .LVU538
 1815              		.loc 1 1026 37 is_stmt 0 view .LVU539
 1816 0030 6B69     		ldr	r3, [r5, #20]
 1817              		.loc 1 1026 3 view .LVU540
 1818 0032 8342     		cmp	r3, r0
 1819 0034 F4DC     		bgt	.L109
 1820              	.L108:
1027:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
 1821              		.loc 1 1027 3 is_stmt 1 view .LVU541
 1822              		.loc 1 1027 32 is_stmt 0 view .LVU542
 1823 0036 0E4B     		ldr	r3, .L114
 1824 0038 5B69     		ldr	r3, [r3, #20]
 1825              		.loc 1 1027 6 view .LVU543
 1826 003a 8342     		cmp	r3, r0
 1827 003c 14DD     		ble	.L111
1028:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 1828              		.loc 1 1028 5 is_stmt 1 view .LVU544
 1829              		.loc 1 1028 49 is_stmt 0 view .LVU545
 1830 003e 00EB4003 		add	r3, r0, r0, lsl #1
 1831 0042 0B49     		ldr	r1, .L114
 1832 0044 01EBC303 		add	r3, r1, r3, lsl #3
 1833 0048 C3F86090 		str	r9, [r3, #96]
1029:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 1834              		.loc 1 1029 5 is_stmt 1 view .LVU546
 1835              		.loc 1 1029 49 is_stmt 0 view .LVU547
 1836 004c C3F86480 		str	r8, [r3, #100]
1030:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 1837              		.loc 1 1030 5 is_stmt 1 view .LVU548
 1838              		.loc 1 1030 49 is_stmt 0 view .LVU549
 1839 0050 9F66     		str	r7, [r3, #104]
1031:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 1840              		.loc 1 1031 5 is_stmt 1 view .LVU550
 1841              		.loc 1 1031 49 is_stmt 0 view .LVU551
 1842 0052 0021     		movs	r1, #0
 1843 0054 1967     		str	r1, [r3, #112]
1032:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 1844              		.loc 1 1032 5 is_stmt 1 view .LVU552
 1845              		.loc 1 1032 49 is_stmt 0 view .LVU553
 1846 0056 D966     		str	r1, [r3, #108]
1033:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
 1847              		.loc 1 1033 5 is_stmt 1 view .LVU554
 1848              		.loc 1 1033 49 is_stmt 0 view .LVU555
 1849 0058 5E67     		str	r6, [r3, #116]
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 56


 1850              	.LVL193:
 1851              	.L110:
1034:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1035:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1036:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1037:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1852              		.loc 1 1037 3 is_stmt 1 view .LVU556
 1853              		.syntax unified
 1854              	@ 1037 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 1855 005a 82F31188 		msr   basepri, r2  
 1856              		
 1857              	@ 0 "" 2
 1858              		.thumb
 1859              		.syntax unified
 1860              	.LBE6:
 1861              		.loc 1 1037 22 view .LVU557
1038:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return BufferIndex;
 1862              		.loc 1 1038 3 view .LVU558
1039:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 1863              		.loc 1 1039 1 is_stmt 0 view .LVU559
 1864 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1865              	.LVL194:
 1866              	.L113:
1018:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1867              		.loc 1 1018 3 is_stmt 1 discriminator 1 view .LVU560
 1868 0062 FFF7FEFF 		bl	_DoInit
 1869              	.LVL195:
1018:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1870              		.loc 1 1018 3 is_stmt 0 discriminator 1 view .LVU561
 1871 0066 D4E7     		b	.L107
 1872              	.LVL196:
 1873              	.L111:
 1874              	.LBB7:
1035:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 1875              		.loc 1 1035 17 view .LVU562
 1876 0068 4FF0FF30 		mov	r0, #-1
 1877              	.LVL197:
1035:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 1878              		.loc 1 1035 17 view .LVU563
 1879 006c F5E7     		b	.L110
 1880              	.L115:
 1881 006e 00BF     		.align	2
 1882              	.L114:
 1883 0070 00000000 		.word	_SEGGER_RTT
 1884              	.LBE7:
 1885              		.cfi_endproc
 1886              	.LFE16:
 1888              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 1889              		.align	1
 1890              		.global	SEGGER_RTT_AllocUpBuffer
 1891              		.syntax unified
 1892              		.thumb
 1893              		.thumb_func
 1894              		.fpu softvfp
 1896              	SEGGER_RTT_AllocUpBuffer:
 1897              	.LVL198:
 1898              	.LFB17:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 57


1040:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1041:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1042:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1043:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1044:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1045:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1046:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1047:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1048:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1049:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1050:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1051:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1052:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1053:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1054:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1055:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1056:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1057:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1058:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0 - Error
1059:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1060:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 1899              		.loc 1 1060 101 is_stmt 1 view -0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              		.loc 1 1060 101 is_stmt 0 view .LVU565
 1904 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1905              	.LCFI22:
 1906              		.cfi_def_cfa_offset 24
 1907              		.cfi_offset 4, -24
 1908              		.cfi_offset 5, -20
 1909              		.cfi_offset 6, -16
 1910              		.cfi_offset 7, -12
 1911              		.cfi_offset 8, -8
 1912              		.cfi_offset 14, -4
 1913 0004 8046     		mov	r8, r0
 1914 0006 0F46     		mov	r7, r1
 1915 0008 1646     		mov	r6, r2
 1916 000a 1D46     		mov	r5, r3
1061:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int BufferIndex;
 1917              		.loc 1 1061 3 is_stmt 1 view .LVU566
1062:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1063:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 1918              		.loc 1 1063 3 view .LVU567
 1919              		.loc 1 1063 3 view .LVU568
 1920 000c 1B4B     		ldr	r3, .L124
 1921              	.LVL199:
 1922              		.loc 1 1063 3 is_stmt 0 view .LVU569
 1923 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1924 0010 6BB3     		cbz	r3, .L123
 1925              	.LVL200:
 1926              	.L117:
 1927              		.loc 1 1063 3 is_stmt 1 discriminator 3 view .LVU570
 1928              	.LBB8:
1064:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1929              		.loc 1 1064 3 discriminator 3 view .LVU571
 1930              		.loc 1 1064 3 discriminator 3 view .LVU572
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 58


 1931              		.syntax unified
 1932              	@ 1064 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 1933 0012 EFF31182 		mrs   r2, basepri  
 1934 0016 4FF02001 		mov   r1, #32       
 1935 001a 81F31188 		msr   basepri, r1  
 1936              		
 1937              	@ 0 "" 2
 1938              	.LVL201:
 1939              		.loc 1 1064 20 discriminator 3 view .LVU573
1065:ARM_SEGGER_RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 1940              		.loc 1 1065 3 discriminator 3 view .LVU574
 1941              		.loc 1 1065 15 is_stmt 0 discriminator 3 view .LVU575
 1942              		.thumb
 1943              		.syntax unified
 1944 001e 0020     		movs	r0, #0
 1945              	.LVL202:
 1946              	.L119:
1066:ARM_SEGGER_RTT/SEGGER_RTT.c ****   do {
 1947              		.loc 1 1066 3 is_stmt 1 view .LVU576
1067:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
 1948              		.loc 1 1067 5 view .LVU577
 1949              		.loc 1 1067 37 is_stmt 0 view .LVU578
 1950 0020 441C     		adds	r4, r0, #1
 1951 0022 04EB4404 		add	r4, r4, r4, lsl #1
 1952 0026 154B     		ldr	r3, .L124
 1953 0028 03EBC404 		add	r4, r3, r4, lsl #3
 1954 002c 6368     		ldr	r3, [r4, #4]
 1955              		.loc 1 1067 8 view .LVU579
 1956 002e 23B1     		cbz	r3, .L118
1068:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
1069:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
1070:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferIndex++;
 1957              		.loc 1 1070 5 is_stmt 1 view .LVU580
 1958              		.loc 1 1070 16 is_stmt 0 view .LVU581
 1959 0030 0130     		adds	r0, r0, #1
 1960              	.LVL203:
1071:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
 1961              		.loc 1 1071 11 is_stmt 1 view .LVU582
 1962              		.loc 1 1071 37 is_stmt 0 view .LVU583
 1963 0032 124B     		ldr	r3, .L124
 1964 0034 1B69     		ldr	r3, [r3, #16]
 1965              		.loc 1 1071 3 view .LVU584
 1966 0036 8342     		cmp	r3, r0
 1967 0038 F2DC     		bgt	.L119
 1968              	.L118:
1072:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
 1969              		.loc 1 1072 3 is_stmt 1 view .LVU585
 1970              		.loc 1 1072 32 is_stmt 0 view .LVU586
 1971 003a 104B     		ldr	r3, .L124
 1972 003c 1B69     		ldr	r3, [r3, #16]
 1973              		.loc 1 1072 6 view .LVU587
 1974 003e 8342     		cmp	r3, r0
 1975 0040 18DD     		ble	.L121
1073:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 1976              		.loc 1 1073 5 is_stmt 1 view .LVU588
 1977              		.loc 1 1073 47 is_stmt 0 view .LVU589
 1978 0042 0E4B     		ldr	r3, .L124
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 59


 1979 0044 411C     		adds	r1, r0, #1
 1980 0046 01EB4104 		add	r4, r1, r1, lsl #1
 1981 004a 43F83480 		str	r8, [r3, r4, lsl #3]
1074:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 1982              		.loc 1 1074 5 is_stmt 1 view .LVU590
 1983              		.loc 1 1074 47 is_stmt 0 view .LVU591
 1984 004e 03EBC401 		add	r1, r3, r4, lsl #3
 1985 0052 4F60     		str	r7, [r1, #4]
1075:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 1986              		.loc 1 1075 5 is_stmt 1 view .LVU592
 1987              		.loc 1 1075 47 is_stmt 0 view .LVU593
 1988 0054 00EB4001 		add	r1, r0, r0, lsl #1
 1989 0058 03EBC103 		add	r3, r3, r1, lsl #3
 1990 005c 1E62     		str	r6, [r3, #32]
1076:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 1991              		.loc 1 1076 5 is_stmt 1 view .LVU594
 1992              		.loc 1 1076 47 is_stmt 0 view .LVU595
 1993 005e 0021     		movs	r1, #0
 1994 0060 9962     		str	r1, [r3, #40]
1077:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 1995              		.loc 1 1077 5 is_stmt 1 view .LVU596
 1996              		.loc 1 1077 47 is_stmt 0 view .LVU597
 1997 0062 5962     		str	r1, [r3, #36]
1078:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
 1998              		.loc 1 1078 5 is_stmt 1 view .LVU598
 1999              		.loc 1 1078 47 is_stmt 0 view .LVU599
 2000 0064 DD62     		str	r5, [r3, #44]
 2001              	.LVL204:
 2002              	.L120:
1079:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1080:ARM_SEGGER_RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1081:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1082:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2003              		.loc 1 1082 3 is_stmt 1 view .LVU600
 2004              		.syntax unified
 2005              	@ 1082 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2006 0066 82F31188 		msr   basepri, r2  
 2007              		
 2008              	@ 0 "" 2
 2009              		.thumb
 2010              		.syntax unified
 2011              	.LBE8:
 2012              		.loc 1 1082 22 view .LVU601
1083:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return BufferIndex;
 2013              		.loc 1 1083 3 view .LVU602
1084:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2014              		.loc 1 1084 1 is_stmt 0 view .LVU603
 2015 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2016              	.LVL205:
 2017              	.L123:
1063:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2018              		.loc 1 1063 3 is_stmt 1 discriminator 1 view .LVU604
 2019 006e FFF7FEFF 		bl	_DoInit
 2020              	.LVL206:
1063:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2021              		.loc 1 1063 3 is_stmt 0 discriminator 1 view .LVU605
 2022 0072 CEE7     		b	.L117
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 60


 2023              	.LVL207:
 2024              	.L121:
 2025              	.LBB9:
1080:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2026              		.loc 1 1080 17 view .LVU606
 2027 0074 4FF0FF30 		mov	r0, #-1
 2028              	.LVL208:
1080:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2029              		.loc 1 1080 17 view .LVU607
 2030 0078 F5E7     		b	.L120
 2031              	.L125:
 2032 007a 00BF     		.align	2
 2033              	.L124:
 2034 007c 00000000 		.word	_SEGGER_RTT
 2035              	.LBE9:
 2036              		.cfi_endproc
 2037              	.LFE17:
 2039              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2040              		.align	1
 2041              		.global	SEGGER_RTT_ConfigUpBuffer
 2042              		.syntax unified
 2043              		.thumb
 2044              		.thumb_func
 2045              		.fpu softvfp
 2047              	SEGGER_RTT_ConfigUpBuffer:
 2048              	.LVL209:
 2049              	.LFB18:
1085:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1086:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1087:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1088:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1089:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1090:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1091:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1092:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1093:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1094:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1095:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1096:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1097:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1098:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1099:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1100:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1101:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1102:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1103:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0 - O.K.
1104:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0 - Error
1105:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1106:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Additional information
1107:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1108:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1109:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1110:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1111:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2050              		.loc 1 1111 124 is_stmt 1 view -0
 2051              		.cfi_startproc
 2052              		@ args = 4, pretend = 0, frame = 0
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 61


 2053              		@ frame_needed = 0, uses_anonymous_args = 0
 2054              		.loc 1 1111 124 is_stmt 0 view .LVU609
 2055 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2056              	.LCFI23:
 2057              		.cfi_def_cfa_offset 24
 2058              		.cfi_offset 4, -24
 2059              		.cfi_offset 5, -20
 2060              		.cfi_offset 6, -16
 2061              		.cfi_offset 7, -12
 2062              		.cfi_offset 8, -8
 2063              		.cfi_offset 14, -4
 2064 0004 0446     		mov	r4, r0
 2065 0006 8846     		mov	r8, r1
 2066 0008 1746     		mov	r7, r2
 2067 000a 1E46     		mov	r6, r3
1112:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 2068              		.loc 1 1112 3 is_stmt 1 view .LVU610
1113:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1114:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2069              		.loc 1 1114 3 view .LVU611
 2070              		.loc 1 1114 3 view .LVU612
 2071 000c 184B     		ldr	r3, .L133
 2072              	.LVL210:
 2073              		.loc 1 1114 3 is_stmt 0 view .LVU613
 2074 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2075 0010 3BB3     		cbz	r3, .L132
 2076              	.LVL211:
 2077              	.L127:
 2078              		.loc 1 1114 3 is_stmt 1 discriminator 3 view .LVU614
1115:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2079              		.loc 1 1115 3 discriminator 3 view .LVU615
 2080              		.loc 1 1115 42 is_stmt 0 discriminator 3 view .LVU616
 2081 0012 174B     		ldr	r3, .L133
 2082 0014 1B69     		ldr	r3, [r3, #16]
 2083              		.loc 1 1115 6 discriminator 3 view .LVU617
 2084 0016 A342     		cmp	r3, r4
 2085 0018 26D9     		bls	.L130
 2086              	.LBB10:
1116:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2087              		.loc 1 1116 5 is_stmt 1 view .LVU618
 2088              		.loc 1 1116 5 view .LVU619
 2089              		.syntax unified
 2090              	@ 1116 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2091 001a EFF31183 		mrs   r3, basepri  
 2092 001e 4FF02001 		mov   r1, #32       
 2093 0022 81F31188 		msr   basepri, r1  
 2094              		
 2095              	@ 0 "" 2
 2096              	.LVL212:
 2097              		.loc 1 1116 22 view .LVU620
1117:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2098              		.loc 1 1117 5 view .LVU621
 2099              		.loc 1 1117 8 is_stmt 0 view .LVU622
 2100              		.thumb
 2101              		.syntax unified
 2102 0026 84B1     		cbz	r4, .L129
1118:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 62


 2103              		.loc 1 1118 7 is_stmt 1 view .LVU623
 2104              		.loc 1 1118 49 is_stmt 0 view .LVU624
 2105 0028 114D     		ldr	r5, .L133
 2106 002a 601C     		adds	r0, r4, #1
 2107 002c 00EB4002 		add	r2, r0, r0, lsl #1
 2108 0030 45F83280 		str	r8, [r5, r2, lsl #3]
1119:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2109              		.loc 1 1119 7 is_stmt 1 view .LVU625
 2110              		.loc 1 1119 49 is_stmt 0 view .LVU626
 2111 0034 05EBC200 		add	r0, r5, r2, lsl #3
 2112 0038 4760     		str	r7, [r0, #4]
1120:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2113              		.loc 1 1120 7 is_stmt 1 view .LVU627
 2114              		.loc 1 1120 49 is_stmt 0 view .LVU628
 2115 003a 04EB4402 		add	r2, r4, r4, lsl #1
 2116 003e 05EBC202 		add	r2, r5, r2, lsl #3
 2117 0042 1662     		str	r6, [r2, #32]
1121:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2118              		.loc 1 1121 7 is_stmt 1 view .LVU629
 2119              		.loc 1 1121 49 is_stmt 0 view .LVU630
 2120 0044 0021     		movs	r1, #0
 2121 0046 9162     		str	r1, [r2, #40]
1122:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2122              		.loc 1 1122 7 is_stmt 1 view .LVU631
 2123              		.loc 1 1122 49 is_stmt 0 view .LVU632
 2124 0048 5162     		str	r1, [r2, #36]
 2125              	.L129:
1123:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
1124:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 2126              		.loc 1 1124 5 is_stmt 1 view .LVU633
 2127              		.loc 1 1124 49 is_stmt 0 view .LVU634
 2128 004a 04EB4404 		add	r4, r4, r4, lsl #1
 2129              	.LVL213:
 2130              		.loc 1 1124 49 view .LVU635
 2131 004e 0848     		ldr	r0, .L133
 2132 0050 00EBC404 		add	r4, r0, r4, lsl #3
 2133 0054 069A     		ldr	r2, [sp, #24]
 2134 0056 E262     		str	r2, [r4, #44]
1125:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2135              		.loc 1 1125 5 is_stmt 1 view .LVU636
 2136              		.syntax unified
 2137              	@ 1125 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2138 0058 83F31188 		msr   basepri, r3  
 2139              		
 2140              	@ 0 "" 2
 2141              		.thumb
 2142              		.syntax unified
 2143              	.LBE10:
 2144              		.loc 1 1125 24 view .LVU637
1126:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r =  0;
 2145              		.loc 1 1126 5 view .LVU638
 2146              	.LVL214:
 2147              		.loc 1 1126 7 is_stmt 0 view .LVU639
 2148 005c 0020     		movs	r0, #0
 2149              	.LVL215:
 2150              	.L126:
1127:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 63


1128:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
1129:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1130:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
1131:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2151              		.loc 1 1131 1 view .LVU640
 2152 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2153              	.LVL216:
 2154              	.L132:
1114:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2155              		.loc 1 1114 3 is_stmt 1 discriminator 1 view .LVU641
 2156 0062 FFF7FEFF 		bl	_DoInit
 2157              	.LVL217:
1114:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2158              		.loc 1 1114 3 is_stmt 0 discriminator 1 view .LVU642
 2159 0066 D4E7     		b	.L127
 2160              	.L130:
1128:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2161              		.loc 1 1128 7 view .LVU643
 2162 0068 4FF0FF30 		mov	r0, #-1
 2163              	.LVL218:
1130:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2164              		.loc 1 1130 3 is_stmt 1 view .LVU644
1130:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2165              		.loc 1 1130 10 is_stmt 0 view .LVU645
 2166 006c F7E7     		b	.L126
 2167              	.L134:
 2168 006e 00BF     		.align	2
 2169              	.L133:
 2170 0070 00000000 		.word	_SEGGER_RTT
 2171              		.cfi_endproc
 2172              	.LFE18:
 2174              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2175              		.align	1
 2176              		.global	SEGGER_RTT_ConfigDownBuffer
 2177              		.syntax unified
 2178              		.thumb
 2179              		.thumb_func
 2180              		.fpu softvfp
 2182              	SEGGER_RTT_ConfigDownBuffer:
 2183              	.LVL219:
 2184              	.LFB19:
1132:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1133:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1134:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1135:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1136:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1137:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1138:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1139:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1140:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1141:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1142:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1143:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1144:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1145:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1146:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1147:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 64


1148:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1149:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1150:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1151:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0  Error
1152:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1153:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Additional information
1154:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1155:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1156:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1157:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1158:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2185              		.loc 1 1158 126 is_stmt 1 view -0
 2186              		.cfi_startproc
 2187              		@ args = 4, pretend = 0, frame = 0
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
 2189              		.loc 1 1158 126 is_stmt 0 view .LVU647
 2190 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2191              	.LCFI24:
 2192              		.cfi_def_cfa_offset 24
 2193              		.cfi_offset 4, -24
 2194              		.cfi_offset 5, -20
 2195              		.cfi_offset 6, -16
 2196              		.cfi_offset 7, -12
 2197              		.cfi_offset 8, -8
 2198              		.cfi_offset 14, -4
 2199 0004 0446     		mov	r4, r0
 2200 0006 8846     		mov	r8, r1
 2201 0008 1746     		mov	r7, r2
 2202 000a 1E46     		mov	r6, r3
1159:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 2203              		.loc 1 1159 3 is_stmt 1 view .LVU648
1160:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1161:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2204              		.loc 1 1161 3 view .LVU649
 2205              		.loc 1 1161 3 view .LVU650
 2206 000c 154B     		ldr	r3, .L142
 2207              	.LVL220:
 2208              		.loc 1 1161 3 is_stmt 0 view .LVU651
 2209 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2210 0010 13B3     		cbz	r3, .L141
 2211              	.LVL221:
 2212              	.L136:
 2213              		.loc 1 1161 3 is_stmt 1 discriminator 3 view .LVU652
1162:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2214              		.loc 1 1162 3 discriminator 3 view .LVU653
 2215              		.loc 1 1162 42 is_stmt 0 discriminator 3 view .LVU654
 2216 0012 144B     		ldr	r3, .L142
 2217 0014 5B69     		ldr	r3, [r3, #20]
 2218              		.loc 1 1162 6 discriminator 3 view .LVU655
 2219 0016 A342     		cmp	r3, r4
 2220 0018 21D9     		bls	.L139
 2221              	.LBB11:
1163:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2222              		.loc 1 1163 5 is_stmt 1 view .LVU656
 2223              		.loc 1 1163 5 view .LVU657
 2224              		.syntax unified
 2225              	@ 1163 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 65


 2226 001a EFF31183 		mrs   r3, basepri  
 2227 001e 4FF02001 		mov   r1, #32       
 2228 0022 81F31188 		msr   basepri, r1  
 2229              		
 2230              	@ 0 "" 2
 2231              	.LVL222:
 2232              		.loc 1 1163 22 view .LVU658
1164:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2233              		.loc 1 1164 5 view .LVU659
 2234              		.loc 1 1164 8 is_stmt 0 view .LVU660
 2235              		.thumb
 2236              		.syntax unified
 2237 0026 5CB1     		cbz	r4, .L138
1165:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2238              		.loc 1 1165 7 is_stmt 1 view .LVU661
 2239              		.loc 1 1165 51 is_stmt 0 view .LVU662
 2240 0028 04EB4400 		add	r0, r4, r4, lsl #1
 2241 002c 0D4D     		ldr	r5, .L142
 2242 002e 05EBC000 		add	r0, r5, r0, lsl #3
 2243 0032 C0F86080 		str	r8, [r0, #96]
1166:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2244              		.loc 1 1166 7 is_stmt 1 view .LVU663
 2245              		.loc 1 1166 51 is_stmt 0 view .LVU664
 2246 0036 4766     		str	r7, [r0, #100]
1167:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2247              		.loc 1 1167 7 is_stmt 1 view .LVU665
 2248              		.loc 1 1167 51 is_stmt 0 view .LVU666
 2249 0038 8666     		str	r6, [r0, #104]
1168:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2250              		.loc 1 1168 7 is_stmt 1 view .LVU667
 2251              		.loc 1 1168 51 is_stmt 0 view .LVU668
 2252 003a 0022     		movs	r2, #0
 2253 003c 0267     		str	r2, [r0, #112]
1169:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2254              		.loc 1 1169 7 is_stmt 1 view .LVU669
 2255              		.loc 1 1169 51 is_stmt 0 view .LVU670
 2256 003e C266     		str	r2, [r0, #108]
 2257              	.L138:
1170:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
1171:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 2258              		.loc 1 1171 5 is_stmt 1 view .LVU671
 2259              		.loc 1 1171 51 is_stmt 0 view .LVU672
 2260 0040 04EB4404 		add	r4, r4, r4, lsl #1
 2261              	.LVL223:
 2262              		.loc 1 1171 51 view .LVU673
 2263 0044 0748     		ldr	r0, .L142
 2264 0046 00EBC404 		add	r4, r0, r4, lsl #3
 2265 004a 069A     		ldr	r2, [sp, #24]
 2266 004c 6267     		str	r2, [r4, #116]
1172:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2267              		.loc 1 1172 5 is_stmt 1 view .LVU674
 2268              		.syntax unified
 2269              	@ 1172 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2270 004e 83F31188 		msr   basepri, r3  
 2271              		
 2272              	@ 0 "" 2
 2273              		.thumb
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 66


 2274              		.syntax unified
 2275              	.LBE11:
 2276              		.loc 1 1172 24 view .LVU675
1173:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r =  0;
 2277              		.loc 1 1173 5 view .LVU676
 2278              	.LVL224:
 2279              		.loc 1 1173 7 is_stmt 0 view .LVU677
 2280 0052 0020     		movs	r0, #0
 2281              	.LVL225:
 2282              	.L135:
1174:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1175:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
1176:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1177:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
1178:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2283              		.loc 1 1178 1 view .LVU678
 2284 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2285              	.LVL226:
 2286              	.L141:
1161:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2287              		.loc 1 1161 3 is_stmt 1 discriminator 1 view .LVU679
 2288 0058 FFF7FEFF 		bl	_DoInit
 2289              	.LVL227:
1161:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2290              		.loc 1 1161 3 is_stmt 0 discriminator 1 view .LVU680
 2291 005c D9E7     		b	.L136
 2292              	.L139:
1175:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2293              		.loc 1 1175 7 view .LVU681
 2294 005e 4FF0FF30 		mov	r0, #-1
 2295              	.LVL228:
1177:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2296              		.loc 1 1177 3 is_stmt 1 view .LVU682
1177:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2297              		.loc 1 1177 10 is_stmt 0 view .LVU683
 2298 0062 F7E7     		b	.L135
 2299              	.L143:
 2300              		.align	2
 2301              	.L142:
 2302 0064 00000000 		.word	_SEGGER_RTT
 2303              		.cfi_endproc
 2304              	.LFE19:
 2306              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2307              		.align	1
 2308              		.global	SEGGER_RTT_SetNameUpBuffer
 2309              		.syntax unified
 2310              		.thumb
 2311              		.thumb_func
 2312              		.fpu softvfp
 2314              	SEGGER_RTT_SetNameUpBuffer:
 2315              	.LVL229:
 2316              	.LFB20:
1179:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1180:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1181:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1182:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1183:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 67


1184:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1185:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1186:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1187:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1188:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1189:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1190:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1191:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1192:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1193:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1194:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0  Error
1195:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1196:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2317              		.loc 1 1196 73 is_stmt 1 view -0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321              		.loc 1 1196 73 is_stmt 0 view .LVU685
 2322 0000 38B5     		push	{r3, r4, r5, lr}
 2323              	.LCFI25:
 2324              		.cfi_def_cfa_offset 16
 2325              		.cfi_offset 3, -16
 2326              		.cfi_offset 4, -12
 2327              		.cfi_offset 5, -8
 2328              		.cfi_offset 14, -4
 2329 0002 0446     		mov	r4, r0
 2330 0004 0D46     		mov	r5, r1
1197:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 2331              		.loc 1 1197 3 is_stmt 1 view .LVU686
1198:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1199:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2332              		.loc 1 1199 3 view .LVU687
 2333              		.loc 1 1199 3 view .LVU688
 2334 0006 0E4B     		ldr	r3, .L150
 2335 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2336 000a 9BB1     		cbz	r3, .L149
 2337              	.LVL230:
 2338              	.L145:
 2339              		.loc 1 1199 3 discriminator 3 view .LVU689
1200:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2340              		.loc 1 1200 3 discriminator 3 view .LVU690
 2341              		.loc 1 1200 42 is_stmt 0 discriminator 3 view .LVU691
 2342 000c 0C4B     		ldr	r3, .L150
 2343 000e 1B69     		ldr	r3, [r3, #16]
 2344              		.loc 1 1200 6 discriminator 3 view .LVU692
 2345 0010 A342     		cmp	r3, r4
 2346 0012 12D9     		bls	.L147
 2347              	.LBB12:
1201:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2348              		.loc 1 1201 5 is_stmt 1 view .LVU693
 2349              		.loc 1 1201 5 view .LVU694
 2350              		.syntax unified
 2351              	@ 1201 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2352 0014 EFF31183 		mrs   r3, basepri  
 2353 0018 4FF02001 		mov   r1, #32       
 2354 001c 81F31188 		msr   basepri, r1  
 2355              		
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 68


 2356              	@ 0 "" 2
 2357              	.LVL231:
 2358              		.loc 1 1201 22 view .LVU695
1202:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName = sName;
 2359              		.loc 1 1202 5 view .LVU696
 2360              		.loc 1 1202 40 is_stmt 0 view .LVU697
 2361              		.thumb
 2362              		.syntax unified
 2363 0020 0134     		adds	r4, r4, #1
 2364              	.LVL232:
 2365              		.loc 1 1202 40 view .LVU698
 2366 0022 04EB4404 		add	r4, r4, r4, lsl #1
 2367              	.LVL233:
 2368              		.loc 1 1202 40 view .LVU699
 2369 0026 064A     		ldr	r2, .L150
 2370 0028 42F83450 		str	r5, [r2, r4, lsl #3]
1203:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2371              		.loc 1 1203 5 is_stmt 1 view .LVU700
 2372              		.syntax unified
 2373              	@ 1203 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2374 002c 83F31188 		msr   basepri, r3  
 2375              		
 2376              	@ 0 "" 2
 2377              		.thumb
 2378              		.syntax unified
 2379              	.LBE12:
 2380              		.loc 1 1203 24 view .LVU701
1204:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r =  0;
 2381              		.loc 1 1204 5 view .LVU702
 2382              	.LVL234:
 2383              		.loc 1 1204 7 is_stmt 0 view .LVU703
 2384 0030 0020     		movs	r0, #0
 2385              	.LVL235:
 2386              	.L144:
1205:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1206:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
1207:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1208:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
1209:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2387              		.loc 1 1209 1 view .LVU704
 2388 0032 38BD     		pop	{r3, r4, r5, pc}
 2389              	.LVL236:
 2390              	.L149:
1199:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2391              		.loc 1 1199 3 is_stmt 1 discriminator 1 view .LVU705
 2392 0034 FFF7FEFF 		bl	_DoInit
 2393              	.LVL237:
1199:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2394              		.loc 1 1199 3 is_stmt 0 discriminator 1 view .LVU706
 2395 0038 E8E7     		b	.L145
 2396              	.L147:
1206:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2397              		.loc 1 1206 7 view .LVU707
 2398 003a 4FF0FF30 		mov	r0, #-1
 2399              	.LVL238:
1208:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2400              		.loc 1 1208 3 is_stmt 1 view .LVU708
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 69


1208:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2401              		.loc 1 1208 10 is_stmt 0 view .LVU709
 2402 003e F8E7     		b	.L144
 2403              	.L151:
 2404              		.align	2
 2405              	.L150:
 2406 0040 00000000 		.word	_SEGGER_RTT
 2407              		.cfi_endproc
 2408              	.LFE20:
 2410              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 2411              		.align	1
 2412              		.global	SEGGER_RTT_SetNameDownBuffer
 2413              		.syntax unified
 2414              		.thumb
 2415              		.thumb_func
 2416              		.fpu softvfp
 2418              	SEGGER_RTT_SetNameDownBuffer:
 2419              	.LVL239:
 2420              	.LFB21:
1210:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1211:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1212:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1213:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1214:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1215:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1216:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1217:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1218:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1219:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1220:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1221:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1222:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1223:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1224:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1225:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0  Error
1226:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1227:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 2421              		.loc 1 1227 75 is_stmt 1 view -0
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 0
 2424              		@ frame_needed = 0, uses_anonymous_args = 0
 2425              		.loc 1 1227 75 is_stmt 0 view .LVU711
 2426 0000 38B5     		push	{r3, r4, r5, lr}
 2427              	.LCFI26:
 2428              		.cfi_def_cfa_offset 16
 2429              		.cfi_offset 3, -16
 2430              		.cfi_offset 4, -12
 2431              		.cfi_offset 5, -8
 2432              		.cfi_offset 14, -4
 2433 0002 0446     		mov	r4, r0
 2434 0004 0D46     		mov	r5, r1
1228:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 2435              		.loc 1 1228 3 is_stmt 1 view .LVU712
1229:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1230:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2436              		.loc 1 1230 3 view .LVU713
 2437              		.loc 1 1230 3 view .LVU714
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 70


 2438 0006 0E4B     		ldr	r3, .L158
 2439 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2440 000a 9BB1     		cbz	r3, .L157
 2441              	.LVL240:
 2442              	.L153:
 2443              		.loc 1 1230 3 discriminator 3 view .LVU715
1231:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2444              		.loc 1 1231 3 discriminator 3 view .LVU716
 2445              		.loc 1 1231 42 is_stmt 0 discriminator 3 view .LVU717
 2446 000c 0C4B     		ldr	r3, .L158
 2447 000e 5B69     		ldr	r3, [r3, #20]
 2448              		.loc 1 1231 6 discriminator 3 view .LVU718
 2449 0010 A342     		cmp	r3, r4
 2450 0012 12D9     		bls	.L155
 2451              	.LBB13:
1232:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2452              		.loc 1 1232 5 is_stmt 1 view .LVU719
 2453              		.loc 1 1232 5 view .LVU720
 2454              		.syntax unified
 2455              	@ 1232 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2456 0014 EFF31183 		mrs   r3, basepri  
 2457 0018 4FF02001 		mov   r1, #32       
 2458 001c 81F31188 		msr   basepri, r1  
 2459              		
 2460              	@ 0 "" 2
 2461              	.LVL241:
 2462              		.loc 1 1232 22 view .LVU721
1233:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName = sName;
 2463              		.loc 1 1233 5 view .LVU722
 2464              		.loc 1 1233 42 is_stmt 0 view .LVU723
 2465              		.thumb
 2466              		.syntax unified
 2467 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2468              	.LVL242:
 2469              		.loc 1 1233 42 view .LVU724
 2470 0024 0648     		ldr	r0, .L158
 2471 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2472 002a 2566     		str	r5, [r4, #96]
1234:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2473              		.loc 1 1234 5 is_stmt 1 view .LVU725
 2474              		.syntax unified
 2475              	@ 1234 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2476 002c 83F31188 		msr   basepri, r3  
 2477              		
 2478              	@ 0 "" 2
 2479              		.thumb
 2480              		.syntax unified
 2481              	.LBE13:
 2482              		.loc 1 1234 24 view .LVU726
1235:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r =  0;
 2483              		.loc 1 1235 5 view .LVU727
 2484              	.LVL243:
 2485              		.loc 1 1235 7 is_stmt 0 view .LVU728
 2486 0030 0020     		movs	r0, #0
 2487              	.LVL244:
 2488              	.L152:
1236:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 71


1237:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
1238:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1239:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
1240:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2489              		.loc 1 1240 1 view .LVU729
 2490 0032 38BD     		pop	{r3, r4, r5, pc}
 2491              	.LVL245:
 2492              	.L157:
1230:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2493              		.loc 1 1230 3 is_stmt 1 discriminator 1 view .LVU730
 2494 0034 FFF7FEFF 		bl	_DoInit
 2495              	.LVL246:
1230:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2496              		.loc 1 1230 3 is_stmt 0 discriminator 1 view .LVU731
 2497 0038 E8E7     		b	.L153
 2498              	.L155:
1237:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2499              		.loc 1 1237 7 view .LVU732
 2500 003a 4FF0FF30 		mov	r0, #-1
 2501              	.LVL247:
1239:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2502              		.loc 1 1239 3 is_stmt 1 view .LVU733
1239:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2503              		.loc 1 1239 10 is_stmt 0 view .LVU734
 2504 003e F8E7     		b	.L152
 2505              	.L159:
 2506              		.align	2
 2507              	.L158:
 2508 0040 00000000 		.word	_SEGGER_RTT
 2509              		.cfi_endproc
 2510              	.LFE21:
 2512              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 2513              		.align	1
 2514              		.global	SEGGER_RTT_SetFlagsUpBuffer
 2515              		.syntax unified
 2516              		.thumb
 2517              		.thumb_func
 2518              		.fpu softvfp
 2520              	SEGGER_RTT_SetFlagsUpBuffer:
 2521              	.LVL248:
 2522              	.LFB22:
1241:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1242:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1243:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1244:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1245:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1246:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1247:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1248:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1249:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1250:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1251:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1252:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1253:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1254:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1255:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1256:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0  Error
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 72


1257:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1258:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 2523              		.loc 1 1258 71 is_stmt 1 view -0
 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 0
 2526              		@ frame_needed = 0, uses_anonymous_args = 0
 2527              		.loc 1 1258 71 is_stmt 0 view .LVU736
 2528 0000 38B5     		push	{r3, r4, r5, lr}
 2529              	.LCFI27:
 2530              		.cfi_def_cfa_offset 16
 2531              		.cfi_offset 3, -16
 2532              		.cfi_offset 4, -12
 2533              		.cfi_offset 5, -8
 2534              		.cfi_offset 14, -4
 2535 0002 0446     		mov	r4, r0
 2536 0004 0D46     		mov	r5, r1
1259:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 2537              		.loc 1 1259 3 is_stmt 1 view .LVU737
1260:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1261:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2538              		.loc 1 1261 3 view .LVU738
 2539              		.loc 1 1261 3 view .LVU739
 2540 0006 0E4B     		ldr	r3, .L166
 2541 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2542 000a 9BB1     		cbz	r3, .L165
 2543              	.LVL249:
 2544              	.L161:
 2545              		.loc 1 1261 3 discriminator 3 view .LVU740
1262:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2546              		.loc 1 1262 3 discriminator 3 view .LVU741
 2547              		.loc 1 1262 42 is_stmt 0 discriminator 3 view .LVU742
 2548 000c 0C4B     		ldr	r3, .L166
 2549 000e 1B69     		ldr	r3, [r3, #16]
 2550              		.loc 1 1262 6 discriminator 3 view .LVU743
 2551 0010 A342     		cmp	r3, r4
 2552 0012 12D9     		bls	.L163
 2553              	.LBB14:
1263:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2554              		.loc 1 1263 5 is_stmt 1 view .LVU744
 2555              		.loc 1 1263 5 view .LVU745
 2556              		.syntax unified
 2557              	@ 1263 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2558 0014 EFF31183 		mrs   r3, basepri  
 2559 0018 4FF02001 		mov   r1, #32       
 2560 001c 81F31188 		msr   basepri, r1  
 2561              		
 2562              	@ 0 "" 2
 2563              	.LVL250:
 2564              		.loc 1 1263 22 view .LVU746
1264:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags = Flags;
 2565              		.loc 1 1264 5 view .LVU747
 2566              		.loc 1 1264 40 is_stmt 0 view .LVU748
 2567              		.thumb
 2568              		.syntax unified
 2569 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2570              	.LVL251:
 2571              		.loc 1 1264 40 view .LVU749
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 73


 2572 0024 0648     		ldr	r0, .L166
 2573 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2574 002a E562     		str	r5, [r4, #44]
1265:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2575              		.loc 1 1265 5 is_stmt 1 view .LVU750
 2576              		.syntax unified
 2577              	@ 1265 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2578 002c 83F31188 		msr   basepri, r3  
 2579              		
 2580              	@ 0 "" 2
 2581              		.thumb
 2582              		.syntax unified
 2583              	.LBE14:
 2584              		.loc 1 1265 24 view .LVU751
1266:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r =  0;
 2585              		.loc 1 1266 5 view .LVU752
 2586              	.LVL252:
 2587              		.loc 1 1266 7 is_stmt 0 view .LVU753
 2588 0030 0020     		movs	r0, #0
 2589              	.LVL253:
 2590              	.L160:
1267:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1268:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
1269:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1270:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
1271:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2591              		.loc 1 1271 1 view .LVU754
 2592 0032 38BD     		pop	{r3, r4, r5, pc}
 2593              	.LVL254:
 2594              	.L165:
1261:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2595              		.loc 1 1261 3 is_stmt 1 discriminator 1 view .LVU755
 2596 0034 FFF7FEFF 		bl	_DoInit
 2597              	.LVL255:
1261:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2598              		.loc 1 1261 3 is_stmt 0 discriminator 1 view .LVU756
 2599 0038 E8E7     		b	.L161
 2600              	.L163:
1268:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2601              		.loc 1 1268 7 view .LVU757
 2602 003a 4FF0FF30 		mov	r0, #-1
 2603              	.LVL256:
1270:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2604              		.loc 1 1270 3 is_stmt 1 view .LVU758
1270:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2605              		.loc 1 1270 10 is_stmt 0 view .LVU759
 2606 003e F8E7     		b	.L160
 2607              	.L167:
 2608              		.align	2
 2609              	.L166:
 2610 0040 00000000 		.word	_SEGGER_RTT
 2611              		.cfi_endproc
 2612              	.LFE22:
 2614              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 2615              		.align	1
 2616              		.global	SEGGER_RTT_SetFlagsDownBuffer
 2617              		.syntax unified
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 74


 2618              		.thumb
 2619              		.thumb_func
 2620              		.fpu softvfp
 2622              	SEGGER_RTT_SetFlagsDownBuffer:
 2623              	.LVL257:
 2624              	.LFB23:
1272:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1273:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1274:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1275:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1276:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1277:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1278:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1279:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1280:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1281:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1282:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1283:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1284:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1285:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1286:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1287:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0  Error
1288:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1289:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 2625              		.loc 1 1289 73 is_stmt 1 view -0
 2626              		.cfi_startproc
 2627              		@ args = 0, pretend = 0, frame = 0
 2628              		@ frame_needed = 0, uses_anonymous_args = 0
 2629              		.loc 1 1289 73 is_stmt 0 view .LVU761
 2630 0000 38B5     		push	{r3, r4, r5, lr}
 2631              	.LCFI28:
 2632              		.cfi_def_cfa_offset 16
 2633              		.cfi_offset 3, -16
 2634              		.cfi_offset 4, -12
 2635              		.cfi_offset 5, -8
 2636              		.cfi_offset 14, -4
 2637 0002 0446     		mov	r4, r0
 2638 0004 0D46     		mov	r5, r1
1290:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 2639              		.loc 1 1290 3 is_stmt 1 view .LVU762
1291:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1292:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2640              		.loc 1 1292 3 view .LVU763
 2641              		.loc 1 1292 3 view .LVU764
 2642 0006 0E4B     		ldr	r3, .L174
 2643 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2644 000a 9BB1     		cbz	r3, .L173
 2645              	.LVL258:
 2646              	.L169:
 2647              		.loc 1 1292 3 discriminator 3 view .LVU765
1293:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2648              		.loc 1 1293 3 discriminator 3 view .LVU766
 2649              		.loc 1 1293 42 is_stmt 0 discriminator 3 view .LVU767
 2650 000c 0C4B     		ldr	r3, .L174
 2651 000e 5B69     		ldr	r3, [r3, #20]
 2652              		.loc 1 1293 6 discriminator 3 view .LVU768
 2653 0010 A342     		cmp	r3, r4
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 75


 2654 0012 12D9     		bls	.L171
 2655              	.LBB15:
1294:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2656              		.loc 1 1294 5 is_stmt 1 view .LVU769
 2657              		.loc 1 1294 5 view .LVU770
 2658              		.syntax unified
 2659              	@ 1294 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2660 0014 EFF31183 		mrs   r3, basepri  
 2661 0018 4FF02001 		mov   r1, #32       
 2662 001c 81F31188 		msr   basepri, r1  
 2663              		
 2664              	@ 0 "" 2
 2665              	.LVL259:
 2666              		.loc 1 1294 22 view .LVU771
1295:ARM_SEGGER_RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags = Flags;
 2667              		.loc 1 1295 5 view .LVU772
 2668              		.loc 1 1295 42 is_stmt 0 view .LVU773
 2669              		.thumb
 2670              		.syntax unified
 2671 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2672              	.LVL260:
 2673              		.loc 1 1295 42 view .LVU774
 2674 0024 0648     		ldr	r0, .L174
 2675 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2676 002a 6567     		str	r5, [r4, #116]
1296:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2677              		.loc 1 1296 5 is_stmt 1 view .LVU775
 2678              		.syntax unified
 2679              	@ 1296 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2680 002c 83F31188 		msr   basepri, r3  
 2681              		
 2682              	@ 0 "" 2
 2683              		.thumb
 2684              		.syntax unified
 2685              	.LBE15:
 2686              		.loc 1 1296 24 view .LVU776
1297:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r =  0;
 2687              		.loc 1 1297 5 view .LVU777
 2688              	.LVL261:
 2689              		.loc 1 1297 7 is_stmt 0 view .LVU778
 2690 0030 0020     		movs	r0, #0
 2691              	.LVL262:
 2692              	.L168:
1298:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1299:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
1300:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1301:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
1302:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2693              		.loc 1 1302 1 view .LVU779
 2694 0032 38BD     		pop	{r3, r4, r5, pc}
 2695              	.LVL263:
 2696              	.L173:
1292:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2697              		.loc 1 1292 3 is_stmt 1 discriminator 1 view .LVU780
 2698 0034 FFF7FEFF 		bl	_DoInit
 2699              	.LVL264:
1292:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 76


 2700              		.loc 1 1292 3 is_stmt 0 discriminator 1 view .LVU781
 2701 0038 E8E7     		b	.L169
 2702              	.L171:
1299:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2703              		.loc 1 1299 7 view .LVU782
 2704 003a 4FF0FF30 		mov	r0, #-1
 2705              	.LVL265:
1301:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2706              		.loc 1 1301 3 is_stmt 1 view .LVU783
1301:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2707              		.loc 1 1301 10 is_stmt 0 view .LVU784
 2708 003e F8E7     		b	.L168
 2709              	.L175:
 2710              		.align	2
 2711              	.L174:
 2712 0040 00000000 		.word	_SEGGER_RTT
 2713              		.cfi_endproc
 2714              	.LFE23:
 2716              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 2717              		.align	1
 2718              		.global	SEGGER_RTT_Init
 2719              		.syntax unified
 2720              		.thumb
 2721              		.thumb_func
 2722              		.fpu softvfp
 2724              	SEGGER_RTT_Init:
 2725              	.LFB24:
1303:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1304:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1305:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1306:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1307:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1308:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1309:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1310:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1311:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1312:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1313:ARM_SEGGER_RTT/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 2726              		.loc 1 1313 29 is_stmt 1 view -0
 2727              		.cfi_startproc
 2728              		@ args = 0, pretend = 0, frame = 0
 2729              		@ frame_needed = 0, uses_anonymous_args = 0
 2730 0000 08B5     		push	{r3, lr}
 2731              	.LCFI29:
 2732              		.cfi_def_cfa_offset 8
 2733              		.cfi_offset 3, -8
 2734              		.cfi_offset 14, -4
1314:ARM_SEGGER_RTT/SEGGER_RTT.c ****   _DoInit();
 2735              		.loc 1 1314 3 view .LVU786
 2736 0002 FFF7FEFF 		bl	_DoInit
 2737              	.LVL266:
1315:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2738              		.loc 1 1315 1 is_stmt 0 view .LVU787
 2739 0006 08BD     		pop	{r3, pc}
 2740              		.cfi_endproc
 2741              	.LFE24:
 2743              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 77


 2744              		.align	1
 2745              		.global	SEGGER_RTT_SetTerminal
 2746              		.syntax unified
 2747              		.thumb
 2748              		.thumb_func
 2749              		.fpu softvfp
 2751              	SEGGER_RTT_SetTerminal:
 2752              	.LVL267:
 2753              	.LFB25:
1316:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1317:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1318:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1319:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1320:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1321:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1322:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1323:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1324:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1325:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1326:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1327:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1328:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1329:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1330:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1331:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (char TerminalId) {
 2754              		.loc 1 1331 46 is_stmt 1 view -0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 8
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 2758              		.loc 1 1331 46 is_stmt 0 view .LVU789
 2759 0000 30B5     		push	{r4, r5, lr}
 2760              	.LCFI30:
 2761              		.cfi_def_cfa_offset 12
 2762              		.cfi_offset 4, -12
 2763              		.cfi_offset 5, -8
 2764              		.cfi_offset 14, -4
 2765 0002 83B0     		sub	sp, sp, #12
 2766              	.LCFI31:
 2767              		.cfi_def_cfa_offset 24
 2768 0004 0446     		mov	r4, r0
1332:ARM_SEGGER_RTT/SEGGER_RTT.c ****   char                  ac[2];
 2769              		.loc 1 1332 3 is_stmt 1 view .LVU790
1333:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2770              		.loc 1 1333 3 view .LVU791
1334:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned Avail;
 2771              		.loc 1 1334 3 view .LVU792
1335:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int r;
 2772              		.loc 1 1335 3 view .LVU793
1336:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
1337:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2773              		.loc 1 1337 3 view .LVU794
 2774              		.loc 1 1337 3 view .LVU795
 2775 0006 1D4B     		ldr	r3, .L189
 2776 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2777 000a FBB1     		cbz	r3, .L186
 2778              	.LVL268:
 2779              	.L179:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 78


 2780              		.loc 1 1337 3 discriminator 3 view .LVU796
1338:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
1339:ARM_SEGGER_RTT/SEGGER_RTT.c ****   r = 0;
 2781              		.loc 1 1339 3 discriminator 3 view .LVU797
1340:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[0] = 0xFFU;
 2782              		.loc 1 1340 3 discriminator 3 view .LVU798
 2783              		.loc 1 1340 9 is_stmt 0 discriminator 3 view .LVU799
 2784 000c FF23     		movs	r3, #255
 2785 000e 8DF80430 		strb	r3, [sp, #4]
1341:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if ((unsigned char)TerminalId < (unsigned char)sizeof(_aTerminalId)) { // We only support a certa
 2786              		.loc 1 1341 3 is_stmt 1 discriminator 3 view .LVU800
 2787              		.loc 1 1341 6 is_stmt 0 discriminator 3 view .LVU801
 2788 0012 0F2C     		cmp	r4, #15
 2789 0014 2FD8     		bhi	.L183
1342:ARM_SEGGER_RTT/SEGGER_RTT.c ****     ac[1] = _aTerminalId[(unsigned char)TerminalId];
 2790              		.loc 1 1342 5 is_stmt 1 view .LVU802
 2791              		.loc 1 1342 25 is_stmt 0 view .LVU803
 2792 0016 1A4B     		ldr	r3, .L189+4
 2793 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 2794              		.loc 1 1342 11 view .LVU804
 2795 001a 8DF80530 		strb	r3, [sp, #5]
1343:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use 
 2796              		.loc 1 1343 5 is_stmt 1 view .LVU805
 2797              	.LVL269:
 2798              	.LBB16:
1344:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we 
 2799              		.loc 1 1344 5 view .LVU806
 2800              		.loc 1 1344 5 view .LVU807
 2801              		.syntax unified
 2802              	@ 1344 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2803 001e EFF31185 		mrs   r5, basepri  
 2804 0022 4FF02001 		mov   r1, #32       
 2805 0026 81F31188 		msr   basepri, r1  
 2806              		
 2807              	@ 0 "" 2
 2808              	.LVL270:
 2809              		.loc 1 1344 22 view .LVU808
1345:ARM_SEGGER_RTT/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2810              		.loc 1 1345 5 view .LVU809
 2811              		.loc 1 1345 15 is_stmt 0 view .LVU810
 2812              		.thumb
 2813              		.syntax unified
 2814 002a 144B     		ldr	r3, .L189
 2815 002c DB6A     		ldr	r3, [r3, #44]
 2816              		.loc 1 1345 23 view .LVU811
 2817 002e 03F00303 		and	r3, r3, #3
 2818              		.loc 1 1345 8 view .LVU812
 2819 0032 022B     		cmp	r3, #2
 2820 0034 0DD0     		beq	.L187
1346:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1347:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, ac, 2u);
1348:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1349:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 2821              		.loc 1 1349 7 is_stmt 1 view .LVU813
 2822              		.loc 1 1349 15 is_stmt 0 view .LVU814
 2823 0036 1348     		ldr	r0, .L189+8
 2824              	.LVL271:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 79


 2825              		.loc 1 1349 15 view .LVU815
 2826 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 2827              	.LVL272:
1350:ARM_SEGGER_RTT/SEGGER_RTT.c ****       if (Avail >= 2) {
 2828              		.loc 1 1350 7 is_stmt 1 view .LVU816
 2829              		.loc 1 1350 10 is_stmt 0 view .LVU817
 2830 003c 0128     		cmp	r0, #1
 2831 003e 11D8     		bhi	.L188
1351:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1352:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, ac, 2u);
1353:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
1354:ARM_SEGGER_RTT/SEGGER_RTT.c ****         r = -1;
 2832              		.loc 1 1354 11 view .LVU818
 2833 0040 4FF0FF30 		mov	r0, #-1
 2834              	.LVL273:
 2835              	.L182:
1355:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
1356:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
1357:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2836              		.loc 1 1357 5 is_stmt 1 view .LVU819
 2837              		.syntax unified
 2838              	@ 1357 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2839 0044 85F31188 		msr   basepri, r5  
 2840              		
 2841              	@ 0 "" 2
 2842              		.thumb
 2843              		.syntax unified
 2844              	.LBE16:
 2845              		.loc 1 1357 24 view .LVU820
 2846              	.LVL274:
 2847              	.L178:
1358:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1359:ARM_SEGGER_RTT/SEGGER_RTT.c ****     r = -1;
1360:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1361:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return r;
1362:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2848              		.loc 1 1362 1 is_stmt 0 view .LVU821
 2849 0048 03B0     		add	sp, sp, #12
 2850              	.LCFI32:
 2851              		.cfi_remember_state
 2852              		.cfi_def_cfa_offset 12
 2853              		@ sp needed
 2854 004a 30BD     		pop	{r4, r5, pc}
 2855              	.LVL275:
 2856              	.L186:
 2857              	.LCFI33:
 2858              		.cfi_restore_state
1337:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 2859              		.loc 1 1337 3 is_stmt 1 discriminator 1 view .LVU822
 2860 004c FFF7FEFF 		bl	_DoInit
 2861              	.LVL276:
1337:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 2862              		.loc 1 1337 3 is_stmt 0 discriminator 1 view .LVU823
 2863 0050 DCE7     		b	.L179
 2864              	.LVL277:
 2865              	.L187:
 2866              	.LBB17:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 80


1346:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, ac, 2u);
 2867              		.loc 1 1346 7 is_stmt 1 view .LVU824
1346:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, ac, 2u);
 2868              		.loc 1 1346 23 is_stmt 0 view .LVU825
 2869 0052 0D4B     		ldr	r3, .L189+12
 2870 0054 1C70     		strb	r4, [r3]
1347:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 2871              		.loc 1 1347 7 is_stmt 1 view .LVU826
 2872 0056 0222     		movs	r2, #2
 2873 0058 01A9     		add	r1, sp, #4
 2874 005a 0A48     		ldr	r0, .L189+8
 2875              	.LVL278:
1347:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 2876              		.loc 1 1347 7 is_stmt 0 view .LVU827
 2877 005c FFF7FEFF 		bl	_WriteBlocking
 2878              	.LVL279:
1347:ARM_SEGGER_RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 2879              		.loc 1 1347 7 view .LVU828
 2880              	.LBE17:
1339:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[0] = 0xFFU;
 2881              		.loc 1 1339 5 view .LVU829
 2882 0060 0020     		movs	r0, #0
 2883              	.LBB18:
 2884 0062 EFE7     		b	.L182
 2885              	.LVL280:
 2886              	.L188:
1351:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, ac, 2u);
 2887              		.loc 1 1351 9 is_stmt 1 view .LVU830
1351:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, ac, 2u);
 2888              		.loc 1 1351 25 is_stmt 0 view .LVU831
 2889 0064 084B     		ldr	r3, .L189+12
 2890 0066 1C70     		strb	r4, [r3]
1352:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 2891              		.loc 1 1352 9 is_stmt 1 view .LVU832
 2892 0068 0222     		movs	r2, #2
 2893 006a 01A9     		add	r1, sp, #4
 2894 006c 0548     		ldr	r0, .L189+8
 2895              	.LVL281:
1352:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 2896              		.loc 1 1352 9 is_stmt 0 view .LVU833
 2897 006e FFF7FEFF 		bl	_WriteNoCheck
 2898              	.LVL282:
1352:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 2899              		.loc 1 1352 9 view .LVU834
 2900              	.LBE18:
1339:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[0] = 0xFFU;
 2901              		.loc 1 1339 5 view .LVU835
 2902 0072 0020     		movs	r0, #0
 2903              	.LBB19:
 2904 0074 E6E7     		b	.L182
 2905              	.LVL283:
 2906              	.L183:
1339:ARM_SEGGER_RTT/SEGGER_RTT.c ****   ac[0] = 0xFFU;
 2907              		.loc 1 1339 5 view .LVU836
 2908              	.LBE19:
1359:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 2909              		.loc 1 1359 7 view .LVU837
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 81


 2910 0076 4FF0FF30 		mov	r0, #-1
 2911              	.LVL284:
1361:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2912              		.loc 1 1361 3 is_stmt 1 view .LVU838
1361:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 2913              		.loc 1 1361 10 is_stmt 0 view .LVU839
 2914 007a E5E7     		b	.L178
 2915              	.L190:
 2916              		.align	2
 2917              	.L189:
 2918 007c 00000000 		.word	_SEGGER_RTT
 2919 0080 00000000 		.word	.LANCHOR0
 2920 0084 18000000 		.word	_SEGGER_RTT+24
 2921 0088 00000000 		.word	.LANCHOR3
 2922              		.cfi_endproc
 2923              	.LFE25:
 2925              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 2926              		.align	1
 2927              		.global	SEGGER_RTT_TerminalOut
 2928              		.syntax unified
 2929              		.thumb
 2930              		.thumb_func
 2931              		.fpu softvfp
 2933              	SEGGER_RTT_TerminalOut:
 2934              	.LVL285:
 2935              	.LFB26:
1363:ARM_SEGGER_RTT/SEGGER_RTT.c **** 
1364:ARM_SEGGER_RTT/SEGGER_RTT.c **** /*********************************************************************
1365:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1366:ARM_SEGGER_RTT/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1367:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1368:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Function description
1369:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    Writes a string to the given terminal
1370:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1371:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1372:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Parameters
1373:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1374:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1375:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1376:ARM_SEGGER_RTT/SEGGER_RTT.c **** *  Return value
1377:ARM_SEGGER_RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1378:ARM_SEGGER_RTT/SEGGER_RTT.c **** *     < 0 - Error.
1379:ARM_SEGGER_RTT/SEGGER_RTT.c **** *
1380:ARM_SEGGER_RTT/SEGGER_RTT.c **** */
1381:ARM_SEGGER_RTT/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (char TerminalId, const char* s) {
 2936              		.loc 1 1381 61 is_stmt 1 view -0
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 0
 2939              		@ frame_needed = 0, uses_anonymous_args = 0
 2940              		.loc 1 1381 61 is_stmt 0 view .LVU841
 2941 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2942              	.LCFI34:
 2943              		.cfi_def_cfa_offset 32
 2944              		.cfi_offset 3, -32
 2945              		.cfi_offset 4, -28
 2946              		.cfi_offset 5, -24
 2947              		.cfi_offset 6, -20
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 82


 2948              		.cfi_offset 7, -16
 2949              		.cfi_offset 8, -12
 2950              		.cfi_offset 9, -8
 2951              		.cfi_offset 14, -4
 2952 0004 0446     		mov	r4, r0
 2953 0006 0D46     		mov	r5, r1
1382:ARM_SEGGER_RTT/SEGGER_RTT.c ****   int                   Status;
 2954              		.loc 1 1382 3 is_stmt 1 view .LVU842
1383:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              FragLen;
 2955              		.loc 1 1383 3 view .LVU843
1384:ARM_SEGGER_RTT/SEGGER_RTT.c ****   unsigned              Avail;
 2956              		.loc 1 1384 3 view .LVU844
1385:ARM_SEGGER_RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2957              		.loc 1 1385 3 view .LVU845
1386:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
1387:ARM_SEGGER_RTT/SEGGER_RTT.c ****   INIT();
 2958              		.loc 1 1387 3 view .LVU846
 2959              		.loc 1 1387 3 view .LVU847
 2960 0008 344B     		ldr	r3, .L206
 2961 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2962 000c FBB1     		cbz	r3, .L202
 2963              	.LVL286:
 2964              	.L192:
 2965              		.loc 1 1387 3 discriminator 3 view .LVU848
1388:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
1389:ARM_SEGGER_RTT/SEGGER_RTT.c ****   // Validate terminal ID.
1390:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
1391:ARM_SEGGER_RTT/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 2966              		.loc 1 1391 3 discriminator 3 view .LVU849
 2967              		.loc 1 1391 6 is_stmt 0 discriminator 3 view .LVU850
 2968 000e 0F2C     		cmp	r4, #15
 2969 0010 61D8     		bhi	.L197
1392:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1393:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1394:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1395:ARM_SEGGER_RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];
 2970              		.loc 1 1395 5 is_stmt 1 view .LVU851
 2971              	.LVL287:
1396:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1397:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1398:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1399:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1400:ARM_SEGGER_RTT/SEGGER_RTT.c ****     FragLen = strlen(s);
 2972              		.loc 1 1400 5 view .LVU852
 2973              		.loc 1 1400 15 is_stmt 0 view .LVU853
 2974 0012 2846     		mov	r0, r5
 2975 0014 FFF7FEFF 		bl	strlen
 2976              	.LVL288:
 2977 0018 8046     		mov	r8, r0
 2978              	.LVL289:
 2979              	.LBB20:
1401:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1402:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // How we output depends upon the mode...
1403:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1404:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2980              		.loc 1 1404 5 is_stmt 1 view .LVU854
 2981              		.loc 1 1404 5 view .LVU855
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 83


 2982              		.syntax unified
 2983              	@ 1404 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 2984 001a EFF31186 		mrs   r6, basepri  
 2985 001e 4FF02001 		mov   r1, #32       
 2986 0022 81F31188 		msr   basepri, r1  
 2987              		
 2988              	@ 0 "" 2
 2989              	.LVL290:
 2990              		.loc 1 1404 22 view .LVU856
1405:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 2991              		.loc 1 1405 5 view .LVU857
 2992              		.loc 1 1405 13 is_stmt 0 view .LVU858
 2993              		.thumb
 2994              		.syntax unified
 2995 0026 2E4F     		ldr	r7, .L206+4
 2996              	.LVL291:
 2997              		.loc 1 1405 13 view .LVU859
 2998 0028 3846     		mov	r0, r7
 2999              	.LVL292:
 3000              		.loc 1 1405 13 view .LVU860
 3001 002a FFF7FEFF 		bl	_GetAvailWriteSpace
 3002              	.LVL293:
 3003 002e 8146     		mov	r9, r0
 3004              	.LVL294:
1406:ARM_SEGGER_RTT/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3005              		.loc 1 1406 5 is_stmt 1 view .LVU861
 3006              		.loc 1 1406 18 is_stmt 0 view .LVU862
 3007 0030 7B69     		ldr	r3, [r7, #20]
 3008              		.loc 1 1406 26 view .LVU863
 3009 0032 03F00303 		and	r3, r3, #3
 3010              		.loc 1 1406 5 view .LVU864
 3011 0036 012B     		cmp	r3, #1
 3012 0038 22D0     		beq	.L194
 3013 003a 022B     		cmp	r3, #2
 3014 003c 3AD0     		beq	.L195
 3015 003e 4BB1     		cbz	r3, .L203
 3016 0040 4FF0FF34 		mov	r4, #-1
 3017              	.LVL295:
 3018              	.L196:
1407:ARM_SEGGER_RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1408:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
1409:ARM_SEGGER_RTT/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1410:ARM_SEGGER_RTT/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1411:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
1412:ARM_SEGGER_RTT/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1413:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = 0;
1414:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
1415:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1416:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1417:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1418:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
1419:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
1420:ARM_SEGGER_RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1421:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
1422:ARM_SEGGER_RTT/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1423:ARM_SEGGER_RTT/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1424:ARM_SEGGER_RTT/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 84


1425:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
1426:ARM_SEGGER_RTT/SEGGER_RTT.c ****       if (Avail < 4u) {
1427:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = -1;
1428:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
1429:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1430:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1431:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1432:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
1433:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
1434:ARM_SEGGER_RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1435:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
1436:ARM_SEGGER_RTT/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
1437:ARM_SEGGER_RTT/SEGGER_RTT.c ****       //
1438:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
1439:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
1440:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
1441:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
1442:ARM_SEGGER_RTT/SEGGER_RTT.c ****     default:
1443:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = -1;
1444:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
1445:ARM_SEGGER_RTT/SEGGER_RTT.c ****     }
1446:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1447:ARM_SEGGER_RTT/SEGGER_RTT.c ****     // Finish up.
1448:ARM_SEGGER_RTT/SEGGER_RTT.c ****     //
1449:ARM_SEGGER_RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3019              		.loc 1 1449 5 is_stmt 1 view .LVU865
 3020              		.syntax unified
 3021              	@ 1449 "ARM_SEGGER_RTT/SEGGER_RTT.c" 1
 3022 0044 86F31188 		msr   basepri, r6  
 3023              		
 3024              	@ 0 "" 2
 3025              		.thumb
 3026              		.syntax unified
 3027              	.LBE20:
 3028              		.loc 1 1449 24 view .LVU866
 3029              	.LVL296:
 3030              	.L191:
1450:ARM_SEGGER_RTT/SEGGER_RTT.c ****   } else {
1451:ARM_SEGGER_RTT/SEGGER_RTT.c ****     Status = -1;
1452:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
1453:ARM_SEGGER_RTT/SEGGER_RTT.c ****   return Status;
1454:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 3031              		.loc 1 1454 1 is_stmt 0 view .LVU867
 3032 0048 2046     		mov	r0, r4
 3033 004a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3034              	.LVL297:
 3035              	.L202:
1387:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 3036              		.loc 1 1387 3 is_stmt 1 discriminator 1 view .LVU868
 3037 004e FFF7FEFF 		bl	_DoInit
 3038              	.LVL298:
1387:ARM_SEGGER_RTT/SEGGER_RTT.c ****   //
 3039              		.loc 1 1387 3 is_stmt 0 discriminator 1 view .LVU869
 3040 0052 DCE7     		b	.L192
 3041              	.LVL299:
 3042              	.L203:
 3043              	.LBB21:
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 85


1412:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = 0;
 3044              		.loc 1 1412 7 is_stmt 1 view .LVU870
1412:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = 0;
 3045              		.loc 1 1412 28 is_stmt 0 view .LVU871
 3046 0054 08F10403 		add	r3, r8, #4
1412:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = 0;
 3047              		.loc 1 1412 10 view .LVU872
 3048 0058 8342     		cmp	r3, r0
 3049 005a 01D9     		bls	.L204
1413:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 3050              		.loc 1 1413 16 view .LVU873
 3051 005c 0024     		movs	r4, #0
 3052 005e F1E7     		b	.L196
 3053              	.L204:
1415:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3054              		.loc 1 1415 9 is_stmt 1 view .LVU874
 3055 0060 2146     		mov	r1, r4
 3056 0062 3846     		mov	r0, r7
 3057              	.LVL300:
1415:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3058              		.loc 1 1415 9 is_stmt 0 view .LVU875
 3059 0064 FFF7FEFF 		bl	_PostTerminalSwitch
 3060              	.LVL301:
1416:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3061              		.loc 1 1416 9 is_stmt 1 view .LVU876
1416:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3062              		.loc 1 1416 23 is_stmt 0 view .LVU877
 3063 0068 4246     		mov	r2, r8
 3064 006a 2946     		mov	r1, r5
 3065 006c 3846     		mov	r0, r7
 3066 006e FFF7FEFF 		bl	_WriteBlocking
 3067              	.LVL302:
 3068 0072 0446     		mov	r4, r0
 3069              	.LVL303:
1417:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 3070              		.loc 1 1417 9 is_stmt 1 view .LVU878
 3071 0074 1B4B     		ldr	r3, .L206+8
 3072 0076 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3073 0078 3846     		mov	r0, r7
 3074              	.LVL304:
1417:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 3075              		.loc 1 1417 9 is_stmt 0 view .LVU879
 3076 007a FFF7FEFF 		bl	_PostTerminalSwitch
 3077              	.LVL305:
 3078 007e E1E7     		b	.L196
 3079              	.LVL306:
 3080              	.L194:
1426:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = -1;
 3081              		.loc 1 1426 7 is_stmt 1 view .LVU880
1426:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = -1;
 3082              		.loc 1 1426 10 is_stmt 0 view .LVU881
 3083 0080 0328     		cmp	r0, #3
 3084 0082 02D8     		bhi	.L205
1427:ARM_SEGGER_RTT/SEGGER_RTT.c ****       } else {
 3085              		.loc 1 1427 16 view .LVU882
 3086 0084 4FF0FF34 		mov	r4, #-1
 3087 0088 DCE7     		b	.L196
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 86


 3088              	.L205:
1429:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3089              		.loc 1 1429 9 is_stmt 1 view .LVU883
 3090 008a 154F     		ldr	r7, .L206+4
1429:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3091              		.loc 1 1429 9 is_stmt 0 view .LVU884
 3092 008c 2146     		mov	r1, r4
 3093 008e 3846     		mov	r0, r7
 3094              	.LVL307:
1429:ARM_SEGGER_RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3095              		.loc 1 1429 9 view .LVU885
 3096 0090 FFF7FEFF 		bl	_PostTerminalSwitch
 3097              	.LVL308:
1430:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3098              		.loc 1 1430 9 is_stmt 1 view .LVU886
1430:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3099              		.loc 1 1430 66 is_stmt 0 view .LVU887
 3100 0094 A9F10402 		sub	r2, r9, #4
1430:ARM_SEGGER_RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3101              		.loc 1 1430 23 view .LVU888
 3102 0098 4245     		cmp	r2, r8
 3103 009a 28BF     		it	cs
 3104 009c 4246     		movcs	r2, r8
 3105 009e 2946     		mov	r1, r5
 3106 00a0 3846     		mov	r0, r7
 3107 00a2 FFF7FEFF 		bl	_WriteBlocking
 3108              	.LVL309:
 3109 00a6 0446     		mov	r4, r0
 3110              	.LVL310:
1431:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 3111              		.loc 1 1431 9 is_stmt 1 view .LVU889
 3112 00a8 0E4B     		ldr	r3, .L206+8
 3113 00aa 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3114 00ac 3846     		mov	r0, r7
 3115              	.LVL311:
1431:ARM_SEGGER_RTT/SEGGER_RTT.c ****       }
 3116              		.loc 1 1431 9 is_stmt 0 view .LVU890
 3117 00ae FFF7FEFF 		bl	_PostTerminalSwitch
 3118              	.LVL312:
 3119 00b2 C7E7     		b	.L196
 3120              	.LVL313:
 3121              	.L195:
1438:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3122              		.loc 1 1438 7 is_stmt 1 view .LVU891
 3123 00b4 0A4F     		ldr	r7, .L206+4
1438:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3124              		.loc 1 1438 7 is_stmt 0 view .LVU892
 3125 00b6 2146     		mov	r1, r4
 3126 00b8 3846     		mov	r0, r7
 3127              	.LVL314:
1438:ARM_SEGGER_RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3128              		.loc 1 1438 7 view .LVU893
 3129 00ba FFF7FEFF 		bl	_PostTerminalSwitch
 3130              	.LVL315:
1439:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3131              		.loc 1 1439 7 is_stmt 1 view .LVU894
1439:ARM_SEGGER_RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 87


 3132              		.loc 1 1439 21 is_stmt 0 view .LVU895
 3133 00be 4246     		mov	r2, r8
 3134 00c0 2946     		mov	r1, r5
 3135 00c2 3846     		mov	r0, r7
 3136 00c4 FFF7FEFF 		bl	_WriteBlocking
 3137              	.LVL316:
 3138 00c8 0446     		mov	r4, r0
 3139              	.LVL317:
1440:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
 3140              		.loc 1 1440 7 is_stmt 1 view .LVU896
 3141 00ca 064B     		ldr	r3, .L206+8
 3142 00cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3143 00ce 3846     		mov	r0, r7
 3144              	.LVL318:
1440:ARM_SEGGER_RTT/SEGGER_RTT.c ****       break;
 3145              		.loc 1 1440 7 is_stmt 0 view .LVU897
 3146 00d0 FFF7FEFF 		bl	_PostTerminalSwitch
 3147              	.LVL319:
1441:ARM_SEGGER_RTT/SEGGER_RTT.c ****     default:
 3148              		.loc 1 1441 7 is_stmt 1 view .LVU898
 3149 00d4 B6E7     		b	.L196
 3150              	.LVL320:
 3151              	.L197:
1441:ARM_SEGGER_RTT/SEGGER_RTT.c ****     default:
 3152              		.loc 1 1441 7 is_stmt 0 view .LVU899
 3153              	.LBE21:
1451:ARM_SEGGER_RTT/SEGGER_RTT.c ****   }
 3154              		.loc 1 1451 12 view .LVU900
 3155 00d6 4FF0FF34 		mov	r4, #-1
 3156              	.LVL321:
1453:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 3157              		.loc 1 1453 3 is_stmt 1 view .LVU901
1453:ARM_SEGGER_RTT/SEGGER_RTT.c **** }
 3158              		.loc 1 1453 10 is_stmt 0 view .LVU902
 3159 00da B5E7     		b	.L191
 3160              	.L207:
 3161              		.align	2
 3162              	.L206:
 3163 00dc 00000000 		.word	_SEGGER_RTT
 3164 00e0 18000000 		.word	_SEGGER_RTT+24
 3165 00e4 00000000 		.word	.LANCHOR3
 3166              		.cfi_endproc
 3167              	.LFE26:
 3169              		.comm	_SEGGER_RTT,168,4
 3170              		.section	.bss._ActiveTerminal,"aw",%nobits
 3171              		.set	.LANCHOR3,. + 0
 3174              	_ActiveTerminal:
 3175 0000 00       		.space	1
 3176              		.section	.bss._acDownBuffer,"aw",%nobits
 3177              		.align	2
 3178              		.set	.LANCHOR2,. + 0
 3181              	_acDownBuffer:
 3182 0000 00000000 		.space	16
 3182      00000000 
 3182      00000000 
 3182      00000000 
 3183              		.section	.bss._acUpBuffer,"aw",%nobits
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 88


 3184              		.align	2
 3185              		.set	.LANCHOR1,. + 0
 3188              	_acUpBuffer:
 3189 0000 00000000 		.space	1024
 3189      00000000 
 3189      00000000 
 3189      00000000 
 3189      00000000 
 3190              		.section	.rodata._aTerminalId,"a"
 3191              		.align	2
 3192              		.set	.LANCHOR0,. + 0
 3195              	_aTerminalId:
 3196 0000 30313233 		.ascii	"0123456789ABCDEF"
 3196      34353637 
 3196      38394142 
 3196      43444546 
 3197              		.text
 3198              	.Letext0:
 3199              		.file 2 "ARM_SEGGER_RTT/SEGGER_RTT.h"
 3200              		.file 3 "/opt/gcc-arm-none-eabi-9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h"
 3201              		.file 4 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/_types.h"
 3202              		.file 5 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/reent.h"
 3203              		.file 6 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/lock.h"
 3204              		.file 7 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/string.h"
 3205              		.file 8 "<built-in>"
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SEGGER_RTT.c
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:16     .text._GetAvailWriteSpace:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:23     .text._GetAvailWriteSpace:0000000000000000 _GetAvailWriteSpace
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:77     .text._WriteNoCheck:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:83     .text._WriteNoCheck:0000000000000000 _WriteNoCheck
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:175    .text._WriteBlocking:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:181    .text._WriteBlocking:0000000000000000 _WriteBlocking
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:322    .text._PostTerminalSwitch:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:328    .text._PostTerminalSwitch:0000000000000000 _PostTerminalSwitch
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:370    .text._PostTerminalSwitch:0000000000000020 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:375    .rodata._DoInit.str1.4:0000000000000000 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:385    .text._DoInit:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:391    .text._DoInit:0000000000000000 _DoInit
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:469    .text._DoInit:0000000000000048 $d
                            *COM*:00000000000000a8 _SEGGER_RTT
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:479    .text.SEGGER_RTT_ReadNoLock:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:486    .text.SEGGER_RTT_ReadNoLock:0000000000000000 SEGGER_RTT_ReadNoLock
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:660    .text.SEGGER_RTT_ReadNoLock:000000000000009c $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:665    .text.SEGGER_RTT_Read:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:672    .text.SEGGER_RTT_Read:0000000000000000 SEGGER_RTT_Read
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:724    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:731    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 SEGGER_RTT_WriteWithOverwriteNoLock
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:977    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000118 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:982    .text.SEGGER_RTT_WriteSkipNoLock:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:989    .text.SEGGER_RTT_WriteSkipNoLock:0000000000000000 SEGGER_RTT_WriteSkipNoLock
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1271   .text.SEGGER_RTT_WriteSkipNoLock:0000000000000124 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1276   .text.SEGGER_RTT_WriteNoLock:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1283   .text.SEGGER_RTT_WriteNoLock:0000000000000000 SEGGER_RTT_WriteNoLock
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1398   .text.SEGGER_RTT_WriteNoLock:0000000000000068 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1403   .text.SEGGER_RTT_Write:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1410   .text.SEGGER_RTT_Write:0000000000000000 SEGGER_RTT_Write
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1483   .text.SEGGER_RTT_Write:0000000000000030 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1488   .text.SEGGER_RTT_WriteString:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1495   .text.SEGGER_RTT_WriteString:0000000000000000 SEGGER_RTT_WriteString
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1538   .text.SEGGER_RTT_GetKey:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1545   .text.SEGGER_RTT_GetKey:0000000000000000 SEGGER_RTT_GetKey
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1597   .text.SEGGER_RTT_WaitKey:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1604   .text.SEGGER_RTT_WaitKey:0000000000000000 SEGGER_RTT_WaitKey
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1633   .text.SEGGER_RTT_HasKey:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1640   .text.SEGGER_RTT_HasKey:0000000000000000 SEGGER_RTT_HasKey
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1693   .text.SEGGER_RTT_HasKey:0000000000000020 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1698   .text.SEGGER_RTT_HasData:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1705   .text.SEGGER_RTT_HasData:0000000000000000 SEGGER_RTT_HasData
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1736   .text.SEGGER_RTT_HasData:000000000000001c $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1741   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1748   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 SEGGER_RTT_AllocDownBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1883   .text.SEGGER_RTT_AllocDownBuffer:0000000000000070 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1889   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:1896   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 SEGGER_RTT_AllocUpBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2034   .text.SEGGER_RTT_AllocUpBuffer:000000000000007c $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2040   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2047   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 SEGGER_RTT_ConfigUpBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2170   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000070 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2175   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2182   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 SEGGER_RTT_ConfigDownBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2302   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000064 $d
ARM GAS  /var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s 			page 90


/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2307   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2314   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 SEGGER_RTT_SetNameUpBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2406   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000040 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2411   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2418   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 SEGGER_RTT_SetNameDownBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2508   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000040 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2513   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2520   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 SEGGER_RTT_SetFlagsUpBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2610   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000040 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2615   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2622   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 SEGGER_RTT_SetFlagsDownBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2712   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000040 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2717   .text.SEGGER_RTT_Init:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2724   .text.SEGGER_RTT_Init:0000000000000000 SEGGER_RTT_Init
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2744   .text.SEGGER_RTT_SetTerminal:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2751   .text.SEGGER_RTT_SetTerminal:0000000000000000 SEGGER_RTT_SetTerminal
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2918   .text.SEGGER_RTT_SetTerminal:000000000000007c $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2926   .text.SEGGER_RTT_TerminalOut:0000000000000000 $t
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:2933   .text.SEGGER_RTT_TerminalOut:0000000000000000 SEGGER_RTT_TerminalOut
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3163   .text.SEGGER_RTT_TerminalOut:00000000000000dc $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3174   .bss._ActiveTerminal:0000000000000000 _ActiveTerminal
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3175   .bss._ActiveTerminal:0000000000000000 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3177   .bss._acDownBuffer:0000000000000000 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3181   .bss._acDownBuffer:0000000000000000 _acDownBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3184   .bss._acUpBuffer:0000000000000000 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3188   .bss._acUpBuffer:0000000000000000 _acUpBuffer
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3191   .rodata._aTerminalId:0000000000000000 $d
/var/folders/mx/xtmnkh9x46d2ktwbhj73try40000gn/T//ccK3jp2R.s:3195   .rodata._aTerminalId:0000000000000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
strlen
